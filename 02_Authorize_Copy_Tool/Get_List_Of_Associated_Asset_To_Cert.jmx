<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Authorize-Copy Tool" enabled="true">
      <stringProp name="TestPlan.comments">Please change Environment (DEV|QA|TRN|PROD) if you want to execute this test across other environment.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="version" elementType="Argument">
            <stringProp name="Argument.name">version</stringProp>
            <stringProp name="Argument.value">v5.20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Environment_IP" elementType="Argument">
            <stringProp name="Argument.name">Environment_IP</stringProp>
            <stringProp name="Argument.value">10.40.76.70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Environment_Port" elementType="Argument">
            <stringProp name="Argument.name">Environment_Port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">QA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Environment_Path" elementType="Argument">
            <stringProp name="Argument.name">Environment_Path</stringProp>
            <stringProp name="Argument.value">InformationPlatformServices</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="grant_type" elementType="Argument">
            <stringProp name="Argument.name">grant_type</stringProp>
            <stringProp name="Argument.value">client_credentials</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scope" elementType="Argument">
            <stringProp name="Argument.name">scope</stringProp>
            <stringProp name="Argument.value">User.Read</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_TRN" elementType="Argument">
            <stringProp name="Argument.name">client_id_TRN</stringProp>
            <stringProp name="Argument.value">8f579cf2-e2c1-4dfc-9e67-604cae901065</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_TRN" elementType="Argument">
            <stringProp name="Argument.name">client_secret_TRN</stringProp>
            <stringProp name="Argument.value">30bG.KxyZflmjf4ud8x.Ey@qNGStQsO-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_QA" elementType="Argument">
            <stringProp name="Argument.name">client_id_QA</stringProp>
            <stringProp name="Argument.value">108b1166-1352-4636-8ccd-34ed0611dbc1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_QA" elementType="Argument">
            <stringProp name="Argument.name">client_secret_QA</stringProp>
            <stringProp name="Argument.value">oey3KPPqmN4O4vG_DE.mG.~S~-XmzM4SJi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_PROD" elementType="Argument">
            <stringProp name="Argument.name">client_id_PROD</stringProp>
            <stringProp name="Argument.value">98da3396-91da-4bf4-8e6c-62ba7a32ba7a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_PROD" elementType="Argument">
            <stringProp name="Argument.name">client_secret_PROD</stringProp>
            <stringProp name="Argument.value">_s~06RK67yvVhc-QgqTfsR0Gwaf5vs~8.U</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_number" elementType="Argument">
            <stringProp name="Argument.name">user_number</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="owner_ref" elementType="Argument">
            <stringProp name="Argument.name">owner_ref</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="applicant_file" elementType="Argument">
            <stringProp name="Argument.name">applicant_file</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ccn" elementType="Argument">
            <stringProp name="Argument.name">ccn</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_scheme" elementType="Argument">
            <stringProp name="Argument.name">cert_scheme</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_body" elementType="Argument">
            <stringProp name="Argument.name">cert_body</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_mark" elementType="Argument">
            <stringProp name="Argument.name">cert_mark</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="product_type" elementType="Argument">
            <stringProp name="Argument.name">product_type</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_no" elementType="Argument">
            <stringProp name="Argument.name">cert_no</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="operator" elementType="Argument">
            <stringProp name="Argument.name">operator</stringProp>
            <stringProp name="Argument.value">eq</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="offset" elementType="Argument">
            <stringProp name="Argument.name">offset</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="inputfile" elementType="Argument">
            <stringProp name="Argument.name">inputfile</stringProp>
            <stringProp name="Argument.value">${__P(inputfile,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults-IP(non-PROD)" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">uliotest.azure-api.net</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults-IP(PROD)" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">io.ul.com/InformationPlatform</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="01.Get List Of Assets | Parties | Decisions" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Get list of Asset for a given Cert/PL</stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_Cert_List" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import java.io.*; 
import org.apache.jmeter.services.FileServer;

try {
	BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));
	String line;
	int counter = 0;
	while ((line = br.readLine()) != null) {
		vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
		vars.put(&quot;Line_data&quot; + counter, (line));
		counter++;
	}
	
	vars.put(&quot;Cert_loop_count&quot;,Integer.toString(counter-19));
	log.info(&quot;Cert_loop_count:&quot;, Integer.toString(counter-19));
	br.close();  	
} 
catch (FileNotFoundException e) {
		System.out.println(&quot;File not exists or insufficient rights&quot;);
		e.printStackTrace();
} catch (IOException e) {
		System.out.println(&quot;An exception occured while reading the file&quot;);
		e.printStackTrace();
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String product_type = &quot;Product-Type&quot;;
String owner = &quot;Owner&quot;;
String ref_no = &quot;Reference-Number&quot;;
String model_no = &quot;Model-Name&quot;;
String family = &quot;Series&quot;;
String creation_date = &quot;Creation-Date&quot;;
String cert_type = &quot;Certificate-Type&quot;;
String cert_body = &quot;Certificate-Body&quot;;
String cert_mark = &quot;Certificate-Mark&quot;;
String cert_no = &quot;Certificate-Name&quot;;
String rev_no = &quot;Certificate-Revision-No&quot;;
String cert_owner = &quot;Certificate-Owner&quot;;

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01a_list_of_assets.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Duplicate_Asset_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String product_type = &quot;Product-Type&quot;;
String owner = &quot;Owner&quot;;
String ref_no = &quot;Reference-Number&quot;;
String model_no = &quot;Model-Name&quot;;
String family = &quot;Series&quot;;
String creation_date = &quot;Creation-Date&quot;;
String asset_Id = &quot;Asset-ID&quot;;
String ul_asset_Id = &quot;UL-Asset-ID&quot;;

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, asset_Id, ul_asset_Id);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01b_list_of_duplicate_assets.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certificate-Party list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String party_account_no = &quot;Account Number&quot;;
String party_site_no = &quot;Party Site Number&quot;;
String party_relation_type = &quot;Relationship Type&quot;;


String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, party_account_no, party_site_no, party_relation_type);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01c_list_of_parties.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certificate-Decisions list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_status = &quot;Certificate Status&quot;;
String iss_date = &quot;Issue-Date&quot;;
String with_date = &quot;Withdrawn-Date&quot;;
String with_reason = &quot;Why is the Certification being Withdrawn?&quot;;
String with_comments = &quot;Withdrawal Comments&quot;;
String new_iss_date = &quot;New-Issue-Date&quot;;

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_status, iss_date, with_date, with_reason, with_comments, new_iss_date);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01d_list_of_decisions.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="TestPlan.comments">${Cert_loop_count}</stringProp>
          <stringProp name="LoopController.loops">${Cert_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
            <stringProp name="TestPlan.comments">Making decision based on Certificate Product type, Standard value and Secondary Standard Value. </stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+19;
String s = &quot;Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
//log.info(value_taxo);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

//log.info(val2_taxo);

certificate_id = val2_taxo[0];
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_Certificate_ID&quot;, cert_id);

certificate_number = val2_taxo[2];
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_number&quot;, cert_no);

certificate_status = val2_taxo[5];
if(certificate_status == null || certificate_status.isEmpty()) {cert_status = &quot;&quot;} else {cert_status = certificate_status.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_Certificate_Status&quot;, cert_status);

new_iss_date = val2_taxo[-1];
if(new_iss_date == null || new_iss_date.isEmpty()) {new_issue_date = &quot;&quot;} else {new_issue_date = new_iss_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_New_Issue_Date&quot;, new_issue_date);


BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;${inputfile}&quot;));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="TestPlan.comments">Under Revision Certificates are out of scope</stringProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${T1_Certificate_Status}&quot;== &quot;Active&quot; || &quot;${T1_Certificate_Status}&quot;== &quot;Under Revision&quot; || &quot;${T1_Certificate_Status}&quot;== &quot;Withdrawn&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${grant_type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${scope}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);
log.info(token);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Monolithic-Certificate Details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/certificateDetails?certificateId=${T1_Certificate_ID}&amp;mode=view&amp;user=50696</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="hasTransaction JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_hasTransation_Block</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..hasTransaction</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="hasCertify JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_hasCertify_Block</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..hasCertify</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="certificateType JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_cert_type</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.certificateType</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="mark JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_mark</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..mark</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="issuingBody JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_issuingBody</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..issuingBody</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="certificateName JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_certificateName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..certificateName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="revisionNumber JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_revisionNumber</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..revisionNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ownerReference JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_ownerReference</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..ownerReference</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="certificateStatus JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_cert_status</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..certificateStatus</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract Unique Asset" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

//Default separator
char SEPARATOR = &apos;\t&apos;;

// 01a_list_of_assets.txt
//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

//01b_list_of_duplicate_assets.txt
//function write line in csv
public void new_writeLine(FileWriter writer_new, String[] new_params, char separator)
{
   boolean new_firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String new_param = &quot;&quot;;
   
   for (int k = 0; k &lt; new_params.length; k++)
   {
      //get param
      new_param = new_params[k];
      //log.info(new_param);
       
         //if the first param in the line, separator is not needed
       if (!new_firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(new_param);
      
       new_firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer_new.append(stringBuilder.toString());

}

//01c_list_of_parties.txt
//function write line in csv
public void party_writeLine(FileWriter writer_parties, String[] party_params, char separator)
{
   boolean party_firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String party_param = &quot;&quot;;
   
   for (int j = 0; j &lt; party_params.length; j++)
   {
      //get param
      party_param = party_params[j];
      //log.info(party_param);
       
         //if the first param in the line, separator is not needed
       if (!party_firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(party_param);
      
       party_firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer_parties.append(stringBuilder.toString());

}

//01d_list_of_decisions.txt
//function write line in csv
public void decision_writeLine(FileWriter writer_decisions, String[] decision_params, char separator)
{
   boolean decision_firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String decision_param = &quot;&quot;;
   
   for (int j = 0; j &lt; decision_params.length; j++)
   {
      //get param
      decision_param = decision_params[j];
      //log.info(party_param);
       
         //if the first param in the line, separator is not needed
       if (!decision_firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(decision_param);
      
       decision_firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer_decisions.append(stringBuilder.toString());

}

JSONArray Number_of_Transaction = new JSONArray(vars.get(&quot;T1_hasTransation_Block&quot;).toString()); 
int Associated_Transaction_count = Number_of_Transaction.length(); // get totalCount of all jsonObjects &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;///// Start Here ///////&gt;&gt;&gt;&gt;&gt;&gt;
//log.info(&quot;Associated_Transaction_count:&quot; + Associated_Transaction_count.toString());

List&lt;String&gt; hasAsset_list = new ArrayList&lt;String&gt;();
for(int asset=0 ; asset &lt; Associated_Transaction_count; asset++){ // iterate through jsonArray 
	JSONObject hasEval_Object = Number_of_Transaction.get(asset);		
	JSONArray hasAsset = new JSONArray();
	hasAsset.put(hasEval_Object.getJSONArray(&quot;hasAssets&quot;));
//	log.info(&quot;hasAsset:&quot; + hasAsset[0]);	
	if (hasAsset[0].length() != 0){
		JSONObject hasAsset_Object = hasAsset[0].getJSONObject(0);
		String asset_Id = hasAsset_Object.getString(&quot;assetId&quot;); 
		String ul_asset_Id = hasAsset_Object.getString(&quot;ulAssetId&quot;); 
		hasAsset_list.add(asset_Id);	

		JSONArray taxonomy_array= hasAsset_Object.getJSONArray(&quot;taxonomy&quot;);
		int tax_count = taxonomy_array.length();
		for(int tax=0 ; tax &lt; tax_count; tax++){ // iterate through jsonArray 
			JSONObject tax_Object = taxonomy_array.get(tax);
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;productType&apos;) {product_type = tax_Object.getString(&quot;value&quot;)}
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;ownerReference_PartySiteID&apos;) {owner = tax_Object.getString(&quot;value&quot;)}
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;referenceNumber&apos;) {ref_no = tax_Object.getString(&quot;value&quot;)}
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;family_Series&apos;) {family = tax_Object.getString(&quot;value&quot;)}
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;modelName&apos;) {model_no = tax_Object.getString(&quot;value&quot;)}
			if(tax_Object.getString(&quot;dataParamName&quot;) == &apos;creationDate&apos;) {creation_date = tax_Object.getString(&quot;value&quot;)}
			//log.info(&quot;tax_Object:&quot; + tax_Object.getString(&quot;dataParamName&quot;));
		}				
		certificate_type = vars.get(&quot;T1_cert_type&quot;);
		if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_mark = vars.get(&quot;T1_mark&quot;);
		if(certificate_mark == null || certificate_mark.isEmpty()) {cert_mark = &quot;&quot;} else {cert_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_body = vars.get(&quot;T1_issuingBody&quot;);
		if(certificate_body == null || certificate_body.isEmpty()) {cert_body = &quot;&quot;} else {cert_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_number = vars.get(&quot;T1_certificateName&quot;);
		if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_rev_no = vars.get(&quot;T1_revisionNumber&quot;);
		if(certificate_rev_no == null || certificate_rev_no.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = certificate_rev_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_owner = vars.get(&quot;T1_new_owner&quot;);
		if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_account_no = vars.get(&quot;T1_new_owner&quot;);
		if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		new_iss_date = vars.get(&quot;T1_New_Issue_Date&quot;);
		if(new_iss_date == null || new_iss_date.isEmpty()) {new_issue_date = &quot;&quot;} else {new_issue_date = new_iss_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
				

		String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner);
		String[] new_params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, asset_Id, ul_asset_Id);
				
		FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01a_list_of_assets.tsv&quot;, true);
		writeLine(fileWriter, params, SEPARATOR);
		FileWriter fileWriter_new = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01b_list_of_duplicate_assets.tsv&quot;, true);
		writeLine(fileWriter_new, new_params, SEPARATOR);
		
BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));
		//proper close to file
		fileWriter.flush();
		fileWriter.close();
		fileWriter_new.flush();
		fileWriter_new.close();	
	}
}

// Writing to List of parties

JSONObject hasParty_Object = Number_of_Transaction.get(0);
JSONArray hasParty = new JSONArray();
hasParty.put(hasParty_Object.getJSONArray(&quot;hasParties&quot;));
//log.info(&quot;hasParty&quot; + hasParty);
hasParty_list = hasParty[0];
//log.info(&quot;hasParty_list&quot; + hasParty_list);
int party_count = hasParty[0].length();
//log.info(&quot;party_count&quot; + party_count.toString());
for(int party=0 ; party &lt; party_count; party++){ // iterate through jsonArray 
	JSONObject party_Object = hasParty[0].get(party);
	//log.info(&quot;party_Object:&quot; + party_Object);
	rel_typ = party_Object.getString(&quot;relationshipType&quot;);
	if (rel_typ == &apos;Brand Owner&apos;){
		party_relation_type = rel_typ.replace(&quot;\&quot;&quot;, &quot;&quot;).trim();
		party_site_no = vars.get(&quot;T1_new_owner&quot;);
		party_account_no = vars.get(&quot;T1_new_owner_account&quot;);
	} else {
		party_relation_type = rel_typ.replace(&quot;\&quot;&quot;, &quot;&quot;).trim();
		partysite_num = party_Object.getString(&quot;partySiteNumber&quot;);
		if(partysite_num == null || partysite_num.isEmpty()) {party_site_no = &quot;&quot;} else {party_site_no = partysite_num.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		acc_num = party_Object.getString(&quot;accountNumber&quot;);
		if(acc_num == null || acc_num.isEmpty()) {party_account_no = &quot;&quot;} else {party_account_no = acc_num.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	}	
	//new_rev_no = &quot;0&quot;;	

	String[] party_params = Arrays.asList(cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner, party_account_no, party_site_no, party_relation_type);

	FileWriter fileWriter_parties = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01c_list_of_parties.tsv&quot;, true);
	writeLine(fileWriter_parties, party_params, SEPARATOR);
	
	fileWriter_parties.flush();
	fileWriter_parties.close();
}

// Writing to List of decisions

cert_status = vars.get(&quot;T1_cert_status&quot;).toString();
if(cert_status != &quot;Under Revision&quot;){
	JSONArray Certify_Block = new JSONArray(vars.get(&quot;T1_hasCertify_Block&quot;).toString()); 
	//log.info(&quot;Certify_Block:&quot; + Certify_Block[0].toString());
	JSONArray hasCertify_att = Certify_Block[0].get(&quot;attributes&quot;);
	//log.info(&quot;hasCertify_att:&quot; + hasCertify_att);
	int decision_att_count = hasCertify_att.length();
	//log.info(&quot;decision_att_count&quot; + decision_att_count.toString());
	
	for(int decision_att=0 ; decision_att &lt; decision_att_count; decision_att++){ // iterate through jsonArray 
	JSONObject decision_att_Object = hasCertify_att.get(decision_att);
	log.info(&quot;decision_att_Object:&quot; + decision_att_Object);
	
	//if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;revisionDate&apos;) {rev_date = decision_att_Object.getString(&quot;value&quot;)};
	//if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;revisionReason&apos;) {rev_reason = decision_att_Object.getString(&quot;value&quot;)};
	if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;withdrawalDate&apos;) {with_date = decision_att_Object.getString(&quot;value&quot;)};
	if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;withdrawComment&apos;) {with_comments = decision_att_Object.getString(&quot;value&quot;)}; else {with_comments = &quot;&quot;};
	if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;withdrawReason&apos;) {with_reason = decision_att_Object.getString(&quot;value&quot;)};
	if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;issueDate&apos;) {iss_date = decision_att_Object.getString(&quot;value&quot;)};
	//if(decision_att_Object.getString(&quot;dataParamName&quot;) == &apos;expiryDate&apos;) {exp_date = decision_att_Object.getString(&quot;value&quot;)};
	}
} else {
	with_date = &quot;&quot;;
	with_comments = &quot;&quot;;
	with_reason = &quot;&quot;;
	iss_date = &quot;&quot;;
	exp_date = &quot;&quot;;
	new_issue_date = &quot;&quot;;
}
	
//	rel_typ = party_Object.getString(&quot;relationshipType&quot;);
//	if (rel_typ == &apos;Brand Owner&apos;){
//		party_relation_type = rel_typ.replace(&quot;\&quot;&quot;, &quot;&quot;).trim();
//		party_site_no = vars.get(&quot;T1_new_owner&quot;);
//		party_account_no = vars.get(&quot;T1_new_owner&quot;);
//	} else {
//		party_relation_type = rel_typ.replace(&quot;\&quot;&quot;, &quot;&quot;).trim();
//		partysite_num = party_Object.getString(&quot;partySiteNumber&quot;);
//		if(partysite_num == null || partysite_num.isEmpty()) {party_site_no = &quot;&quot;} else {party_site_no = partysite_num.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//		acc_num = party_Object.getString(&quot;accountNumber&quot;);
//		if(acc_num == null || acc_num.isEmpty()) {party_account_no = &quot;&quot;} else {party_account_no = acc_num.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//	}	
//	//new_rev_no = &quot;0&quot;;	
//
//String[] decision_params = Arrays.asList(cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner, cert_status, iss_date, with_date, with_reason, with_comments);

String[] decision_params = Arrays.asList(cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner, cert_status, iss_date, with_date, with_reason, with_comments, new_issue_date);

FileWriter writer_decisions = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;01d_list_of_decisions.tsv&quot;, true);
writeLine(writer_decisions, decision_params, SEPARATOR);
	
writer_decisions.flush();
writer_decisions.close();
</stringProp>
                <stringProp name="TestPlan.comments">Get List of Base Asset Associated with Base certificate</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="02.Remove Duplicates to Create Unique Asset List" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.Writer;
import java.util.List;
import java.text.*;
import java.util.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * @author ul.com
 * How to Remove Duplicate Elements from CSV file in Java?
 */

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

BufferedReader br = null;
String line = &quot;&quot;;

// This class implements the Set interface, backed by a hash table (actually a HashMap instance).
// It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will
// remain constant over time. This class permits the null element.
HashSet&lt;String&gt; iterateAllLines = new HashSet&lt;&gt;();

try{
	br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;01b_list_of_duplicate_assets.tsv&quot;));
	while ((line = br.readLine()) != null) {
                if (iterateAllLines.add(line)) {
                    log.info(&quot;Processed line: &quot; + line);
                    String[] params = Arrays.asList(line);
                    FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;02_list_of_unique_assets.tsv&quot;, true);
                    writeLine(fileWriter, params, SEPARATOR);

                    //proper close to file
				fileWriter.flush();
				fileWriter.close();
                }else if (line != null || line.isEmpty()) {
                    log.info(&quot;--------------- Skipped line: &quot; + line);
                }
     }
} catch (FileNotFoundException e) {
            e.printStackTrace();
} catch (IOException e) {
            e.printStackTrace();
} finally {
     if (br != null) {
         try {
             br.close();
         } catch (IOException e) {
         						e.printStackTrace();
         }
     }
  }	</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="03.authorize copy - cert" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Select as Template</stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_Cert_List" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import java.io.*; 
import org.apache.jmeter.services.FileServer;

try {
	BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));
	String line;
	int counter = 0;
	while ((line = br.readLine()) != null) {
		vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
		vars.put(&quot;Line_data&quot; + counter, (line));
		counter++;
	}
	
	vars.put(&quot;Cert_loop_count&quot;,Integer.toString(counter-20));
	//log.info(&quot;Cert_loop_count:&quot;, Integer.toString(counter-19));
	br.close();  	
} 
catch (FileNotFoundException e) {
		System.out.println(&quot;File not exists or insufficient rights&quot;);
		e.printStackTrace();
} catch (IOException e) {
		System.out.println(&quot;An exception occured while reading the file&quot;);
		e.printStackTrace();
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certificate_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate_ID&quot;;
String new_cert_no = &quot;New_Certificate_Name&quot;;
//String cert_message = &quot;Message&quot;;

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_id, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;03_list_of_certificate_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="TestPlan.comments">${Cert_loop_count}</stringProp>
          <stringProp name="LoopController.loops">${Cert_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
            <stringProp name="TestPlan.comments">Making decision based on Certificate Product type, Standard value and Secondary Standard Value. </stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+20;
String s = &quot;Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
//log.info(value_taxo);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

//log.info(val2_taxo);

certificate_id = val2_taxo[0];
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_Certificate_ID&quot;, cert_id);

certificate_number = val2_taxo[2];
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_number&quot;, cert_no);

certificate_status = val2_taxo[5];
if(certificate_status == null || certificate_status.isEmpty()) {cert_status = &quot;&quot;} else {cert_status = certificate_status.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_Certificate_Status&quot;, cert_status);

new_vol = val2_taxo[-3];
if(new_vol == null || new_vol.isEmpty()) {new_volume = &quot;&quot;} else {new_volume = new_vol.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_New_Volume&quot;, new_volume);

new_sec = val2_taxo[-2];
if(new_sec == null || new_sec.isEmpty()) {new_section = &quot;&quot;} else {new_section = new_sec.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_New_Section&quot;, new_section);

new_iss_date = val2_taxo[-1];
if(new_iss_date == null || new_iss_date.isEmpty()) {new_issue_date = &quot;&quot;} else {new_issue_date = new_iss_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_New_Issue_Date&quot;, new_issue_date);

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="TestPlan.comments">Under Revision Certificates are out of scope</stringProp>
            <stringProp name="IfController.condition">${__groovy(&quot;${T1_Certificate_Status}&quot;!= &quot;Obsolete&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${grant_type}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${scope}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                  <elementProp name="client_secret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_secret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Certificate Details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/certificate/${T1_Certificate_ID}?mode=view&amp;user=${T1_new_employee_number}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Hierarchy JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_cert_hierarchy</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.hierarchy</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Attributes JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_cert_attributes</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..attributes</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Ref_Attributes JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_cert_ref_attributes</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..ref_attributes</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Certificate Select As Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/certificate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.json.JSONObject;
import org.json.JSONArray;
import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import org.json.JSONException;
import org.json.simple.*


//////////////////////////////////////////////////////
//Create cert Attributes Object
/////////////////////////////////////////////////////

JSONArray cert_Attributes = new JSONArray(vars.get(&quot;T1_cert_attributes&quot;).toString()); 
int cert_att_count = cert_Attributes.length(); // get totalCount of all jsonObjects
//log.info(&quot;cert_att_count:&quot; + cert_att_count.toString());
//log.info(&quot;cert_Attributes:&quot; + cert_Attributes.toString());

List&lt;String&gt; cert_ver_final_list_value = new ArrayList&lt;String&gt;();
for(int att=0 ; att &lt; cert_att_count; att++){ // iterate through jsonArray 
	JSONObject cert_att_Object = cert_Attributes.getJSONObject(att);
	//log.info(&quot;cert_att_Object:&quot; + cert_att_Object.toString());
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;ownerReference_PartySiteID&apos;) {old_owner = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;fileNumber&apos;) {old_file_no = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;aLFileNumber&apos;) {old_listee_no = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;volume&apos;) {old_volume = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;section&apos;) {old_section = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;certificateType&apos;) {old_cert_type = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;issuingBody&apos;) {old_body = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;mark&apos;) {old_mark = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;certificateName&apos;) {old_cert_num = cert_att_Object.getString(&quot;value&quot;)}
	if(cert_att_Object.getString(&quot;dataParamName&quot;) == &apos;revisionNumber&apos;) {old_rev_num = cert_att_Object.getString(&quot;value&quot;)}
}

cal_owner = vars.get(&quot;T1_new_owner&quot;);
if(cal_owner == null || cal_owner == &apos;&apos;) {final_owner = old_owner} else {final_owner = cal_owner};
cal_file_no = vars.get(&quot;T1_new_applicant&quot;);
if(cal_file_no == null || cal_file_no == &apos;&apos;) {final_applicant_file = old_file_no} else {final_applicant_file = cal_file_no};
cal_listee_no = vars.get(&quot;T1_new_listee&quot;);
if(cal_listee_no == null || cal_listee_no == &apos;&apos;) {final_listee = old_listee_no} else {final_listee = cal_listee_no};
cal_volume = vars.get(&quot;T1_New_Volume&quot;);
if(cal_volume == null || cal_volume == &apos;&apos;) {final_volume = old_volume} else {final_volume = cal_volume};
cal_section = vars.get(&quot;T1_New_Section&quot;);
if(cal_section == null || cal_section == &apos;&apos;) {final_section = old_section} else {final_section = cal_section};
final_rev_no = 0;
cal_create_date = new Date().format(&apos;yyMMdd&apos;);

modified_cal_listee_no = final_listee.substring(1);
log.info(&quot;modified_cal_listee_no:&quot; + modified_cal_listee_no);

if (old_cert_type == &quot;US Safety Scheme&quot;){
	cal_cert_num = &apos;UL-US-L&apos;+modified_cal_listee_no+&apos;-&apos;+cal_create_date+&apos;000&apos;+${__jm__Loop Controller__idx}
	log.info(&quot;cal_cert_num:&quot; + cal_cert_num);
} else {
	cal_cert_num = &apos;UL-CA-L&apos;+modified_cal_listee_no+&apos;-&apos;+cal_create_date+&apos;000&apos;+${__jm__Loop Controller__idx}
	log.info(&quot;cal_cert_num:&quot; + cal_cert_num);
}


vars.put(&quot;certificate_type&quot;, old_cert_type);
vars.put(&quot;certificate_body&quot;, old_body);
vars.put(&quot;certificate_mark&quot;, old_mark);
vars.put(&quot;certificate_number&quot;, old_cert_num);
vars.put(&quot;new_certificate_number&quot;, cal_cert_num);
//vars.put(&quot;rev_number&quot;, old_rev_num);
vars.put(&quot;rev_number&quot;, final_rev_no.toString());

//////////////////////////////////////////////////////////
//Update cert attributes Object
//////////////////////////////////////////////////////////
String getAttToken = vars.get(&quot;T1_cert_attributes&quot;);
JSONArray newArray = new JSONArray(getAttToken);
//log.info(&quot;Output array : &quot; + newArray);

for (int i=0; i &lt; newArray.length(); i++){
    JSONObject itemArr = new JSONObject(newArray.get(i).toString()); 
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;ownerReference&quot;)){
        itemArr.put(&quot;value&quot;, final_owner);
        newArray.put(i, itemArr);
    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;certificateName&quot;)){
        itemArr.put(&quot;value&quot;, cal_cert_num);
        newArray.put(i, itemArr);
    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;fileNumber&quot;)){
        itemArr.put(&quot;value&quot;, final_applicant_file);
        newArray.put(i, itemArr);
    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;aLFileNumber&quot;)){
        itemArr.put(&quot;value&quot;, final_listee);
        newArray.put(i, itemArr);
    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;volume&quot;)){
        itemArr.put(&quot;value&quot;, final_volume);
        newArray.put(i, itemArr);
    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;section&quot;)){
        itemArr.put(&quot;value&quot;, final_section);
        newArray.put(i, itemArr);
    }  
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;revisionNumber&quot;)){
        itemArr.put(&quot;value&quot;, final_rev_no);
        newArray.put(i, itemArr);
    }
}

vars.put(&quot;T1_cert_attributes_Modified&quot;, newArray.toString());
//log.info(&quot;Output array : &quot; + newArray);

//////////////////////////////////////////////////////
//Create cert Ref-Attributes Object
/////////////////////////////////////////////////////

JSONArray cert_ref_Attributes = new JSONArray(vars.get(&quot;T1_cert_ref_attributes&quot;).toString());
JSONArray newArray_standard = new JSONArray(cert_ref_Attributes.toString());
JSONArray cert_prod_Array = new JSONArray();
JSONArray cert_std_value_Array = new JSONArray();

try{
	for (int k=0; k &lt; cert_ref_Attributes.length(); k++){
	     JSONObject itemArr_k = new JSONObject(cert_ref_Attributes.get(k).toString());
	     //log.info(&quot;itemArr_k: &quot; + itemArr_k);
	     if(itemArr_k.get(&quot;dataParamName&quot;).toString().equals(&quot;certificationProductType&quot;)){
	    	   cert_prod_Array.put(itemArr_k.get(&quot;value&quot;));
	    	   //log.info(&quot;cert_prod_Array: &quot; + cert_prod_Array);
	        vars.put(&quot;T1_cert_product_unique_identifier&quot;,cert_prod_Array[0][&quot;uniqueIdentifier&quot;]);       
	        newArray_standard.remove(k);
	        //log.info(&quot;newArray_standard: &quot; + newArray_standard);
		   int standard_count = newArray_standard.length();
		   vars.put(&quot;T1_cert_std_count&quot;, standard_count.toString());
		   log.info(&quot;standard_count:&quot; + standard_count.toString()); 	
		   if (standard_count &gt; 0){
		   	for (int std=0; std &lt; standard_count; std++){
		   		JSONObject itemstd = new JSONObject(newArray_standard.get(std).toString());
		   	     //log.info(&quot;itemstd: &quot; + itemstd);
		   	 	if(itemstd.get(&quot;dataParamName&quot;).toString().equals(&quot;standard&quot;)){
		   	 		cert_std_value_Array.put(0, itemstd.get(&quot;value&quot;));
		   	 		log.info(&quot;cert_std_value_Array_&quot;+std +cert_std_value_Array); 
		   	 		vars.put(&quot;T1_cert_std_unique_identifier_&quot;+std, cert_std_value_Array[0][&quot;uniqueIdentifier&quot;]);
		   	 	}
		   	}
		   }
		   else {
		   	 		vars.put(&quot;T1_cert_std_count&quot;, &quot;0&quot;); 
					vars.put(&quot;T1_cert_std_unique_identifier_0&quot;, &quot;No-standards&quot;);
		   } 
	    }
	}
}
catch (JSONException) {
	vars.put(&quot;T1_cert_std_count&quot;, &quot;0&quot;); 
	vars.put(&quot;T1_cert_std_unique_identifier_0&quot;, &quot;No-standards&quot;);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//To Remove square brackets at beginning and ending of JSON response
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

String getToken = vars.get(&quot;T1_cert_attributes_Modified&quot;);
getToken = getToken.replaceAll(/^\[(.+)\]$/,&apos;$1&apos;);
vars.put(&quot;T1_cert_attributes_Modified&quot;,getToken);

String getToken_content = vars.get(&quot;T1_cert_ref_attributes&quot;);
getToken_content = getToken_content.replaceAll(/^\[(.+)\]$/,&apos;$1&apos;);
vars.put(&quot;T1_cert_ref_attributes_Modified&quot;,getToken_content);
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_Cert_SAT" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificate\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateType\&quot; : \&quot;${certificate_type}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBody\&quot; : \&quot;${certificate_body}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;mark\&quot; : \&quot;${certificate_mark}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateName\&quot; : \&quot;${new_certificate_number}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;revisionNumber\&quot; : \&quot;0\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReference\&quot; : \&quot;${T1_new_owner}\&quot;,&quot;);
result.append(&apos;\n&apos;);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Hierarchy blob starts here
result.append(&quot;\&quot;hierarchy\&quot; : &quot;);
result.append(&apos;\n&apos;);
result.append(&apos;${T1_cert_hierarchy}&apos;);
result.append(&quot;,&quot;);
result.append(&apos;\n&apos;);
//Hierarchy blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//attributes blob starts here
result.append(&quot;\&quot;attributes\&quot; : [&quot;);
result.append(&apos;\n&apos;);
String att = &quot;T1_cert_attributes_Modified&quot;;
String att_list_item = vars.get(att);
result.append(att_list_item);
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);
//attributes blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&quot;\&quot;ref_attributes\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;action\&quot; : \&quot;add\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;certificationProductType\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_cert_product_unique_identifier}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;name\&quot; : \&quot;Certification Product Type\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;pkSchemeScopeId\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;pkScopeId\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
//String ct = &quot;T1_cert_std_count&quot;;
int st_count = vars.get(&apos;T1_cert_std_count&apos;);
log.info(&quot;st_count:&quot; +st_count.toString());
int at_count = 0;
if (st_count-48 &gt; 0){
	for(at_count; at_count &lt; st_count-48; at_count++){
		result.append(&apos;,&apos;);
		result.append(&apos;\n&apos;);
		result.append(&quot;{&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;action\&quot; : \&quot;add\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;dataParamName\&quot; : \&quot;standard\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;uom\&quot; : \&quot;N/A\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;seq\&quot; : \&quot;$at_count\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		String m = &quot;T1_cert_std_unique_identifier_&quot;;
		String n = new Integer (at_count).toString();
		String o = m+n;
		String cert_std = vars.get(o);
		result.append(&quot;\&quot;value\&quot; : \&quot;$cert_std\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;name\&quot; : \&quot;Standard\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;pkSchemeScopeStandardId\&quot; : \&quot;\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;pkStandardId\&quot; : \&quot;\&quot;,&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;\&quot;pkStandardLabelId\&quot; : \&quot;\&quot;&quot;);
		result.append(&apos;\n&apos;);
		result.append(&quot;}&quot;);
	}
}
//result.append(ref_att_list_item);
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);
//ref_attributes blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&quot;\&quot;certify\&quot; : \&quot;N\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;revisionDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;expiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;withdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
user_value = &apos;${T1_new_employee_number}&apos;;
if(user_value == null || user_value.isEmpty()) {user_val = &quot;&quot;} else {user_val = user_value.replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;).trim()};
//result.append(&quot;\&quot;user\&quot; : \&quot;&quot;+user_val+&quot;\&quot;&quot;);
//We can handle user creation in two different ways
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\&quot;+user_val+&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());</stringProp>
                <stringProp name="TestPlan.comments">SAT - Select As Template</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Edit_Code JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_Edit_Code</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..code</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Certificate_Id JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_Certificate_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..certificateId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Certificate_Name JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_Certificate_Name</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..certificateName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Certificate_Message JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">T1_Certificate_Message</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Certificate-id in CSV file" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+19;
String s = &quot;Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));

//document_id = val2_cert_taxo[1];
//if(document_id == null || document_id.isEmpty()) {doc_id = &quot;Empty Value for Document-ID&quot;} else {doc_id = document_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_type = vars.get(&quot;certificate_type&quot;);
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = vars.get(&quot;certificate_body&quot;);;
if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark =vars.get(&quot;certificate_mark&quot;);;
if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_number = vars.get(&quot;certificate_number&quot;);;
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
rev_number = &apos;0&apos;.toString();
if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = vars.get(&quot;T1_new_owner&quot;)
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

message = vars.get(&quot;T1_Certificate_Message&quot;);
certificate_id = vars.get(&quot;T1_Certificate_ID&quot;);
new_cert_id=&quot;&quot;;
if(certificate_id.isEmpty()) {new_cert_id = message.trim().toString()} else {new_cert_id = certificate_id.trim().toString()};
new_certificate_name = vars.get(&quot;T1_Certificate_Name&quot;);
if(new_certificate_name.isEmpty()) {new_cert_no = message.trim().toString()} else {new_cert_no = new_certificate_name.trim().toString()};



String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, cert_owner, new_cert_id, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;03_list_of_certificate_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="04.autorize copy - asset" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Paginated service</stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
//      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String product_type = &quot;Product-Type&quot;;
String owner = &quot;Owner&quot;;
String ref_no = &quot;Reference-Number&quot;;
String model_no = &quot;Model-Name&quot;;
String family = &quot;Series&quot;;
String creation_date = &quot;Creation-Date&quot;;
String ass_id = &quot;Asset-ID&quot;

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, ass_id);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;04_list_of_assets.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-unique-asset-Report" enabled="true">
          <stringProp name="TestPlan.comments">Making decision based on Certificate Product type, Standard value and Secondary Standard Value. </stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;02_list_of_unique_assets.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Asset_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data&quot; + counter, (line));
	counter++;	
}

//counter-4 indicates we start asset creation from line number 4 in the csv file as this will avoid first four line with &quot;uom, dataParamName, seq, name&quot;  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${grant_type}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${scope}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-Token" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler-File iterate" enabled="true">
            <stringProp name="TestPlan.comments">Making decision based on Certificate Product type, Standard value and Secondary Standard Value. </stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

product_type = val2_taxo[0];
//if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type};
vars.put(&quot;product_type&quot;, product_type);

ass_owner = val2_taxo[1];
//if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot; &quot;} else {asset_owner = ass_owner};
vars.put(&quot;owner_ref&quot;, ass_owner);

ref_no = val2_taxo[2];
//if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no};
vars.put(&quot;ref_no&quot;, ref_no);

model_no = val2_taxo[3];
model = model_no.replaceAll(&apos;^\&quot;+|\&quot;+$&apos;, &quot;&quot;).trim();
vars.put(&quot;model_no&quot;, model);

family_series = val2_taxo[4];
//if(family_series == null || family_series == &apos;&apos;) {series = &quot;&quot;} else {series = family_series};
vars.put(&quot;series&quot;, family_series);

SimpleDateFormat csv_taxo_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
try {
	Date taxo_parsedDate = csv_taxo_date.parse(val2_taxo[5]);
	SimpleDateFormat taxo_json_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	created_date = taxo_json_date.format(taxo_parsedDate)
	creation_date = created_date;
}
catch (ParseException Unparseableex) 
	{
		creation_date = &quot;&quot;;
	}
vars.put(&quot;creation_date&quot;, creation_date);

ass_id = val2_taxo[6];
asset_id = ass_id.replaceAll(&apos;^\&quot;+|\&quot;+$&apos;, &quot;&quot;).trim();
vars.put(&quot;asset_Id&quot;, asset_id);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get the Metadata ID for Product Type" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/hierarchy/metadata?metadataType=${product_type}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Metadata_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">metadataId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..metadataId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Asset Details " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/${asset_Id}?user=${T1_new_employee_number}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Modularized API to fetch only attributes.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset Hierarchy JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Hierarchy</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..hierarchy</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset Attributes JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Attributes</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.attributes</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset Taxonomy JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Taxonomy</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..taxonomy</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset Collection_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Collection_Id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..collectionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Asset Details-content" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/${asset_Id}?ContentType=true&amp;user=${T1_new_employee_number}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Modularized API to fetch only attributes.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset Attributes Content Type JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Attributes_Content_Type</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..attributes</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Asset from non-ODS-Asset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData_asset}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.json.JSONObject;
import org.json.JSONArray;
import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import org.json.JSONException;
import org.json.simple.*


String uniqueID = UUID.randomUUID().toString();
//log.info(&quot;uniqueID:&quot; + uniqueID +&apos;_&apos;+ formatter.format(date));

col_name = uniqueID.toString();
if(col_name == null || col_name.isEmpty()) {collection_name = &quot;&quot;} else {collection_name = col_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;Collection_Name&quot;, collection_name);
//log.info(&quot;collection_name: &quot; + collection_name);

col_project = vars.get(&quot;T1_new_project_number&quot;);
if(col_project == null || col_project.isEmpty()) {collection_project = &quot;&quot;} else {collection_project = col_project.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;Collection_Project&quot;, collection_project);

col_quote = &quot;&quot;;
if(col_quote == null || col_quote.isEmpty()) {collection_quote = &quot;&quot;} else {collection_quote = col_quote.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;Collection_Quote&quot;, collection_quote);

col_order = &quot;&quot;;
if(col_order == null || col_order.isEmpty()) {collection_order = &quot;&quot;} else {collection_order = col_order.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;Collection_Order&quot;, collection_order);

//////////////////////////////////////////////////////
//Create Attributes Object
/////////////////////////////////////////////////////

JSONArray asset_Attributes = new JSONArray(vars.get(&quot;T1_Asset_Attributes&quot;).toString()); 
int asset_att_count = asset_Attributes.length(); // get totalCount of all jsonObjects
log.info(&quot;asset_att_count:&quot; + asset_att_count.toString());

List&lt;String&gt; asset_ver_final_list_value = new ArrayList&lt;String&gt;();
for(int att=0 ; att &lt; asset_att_count; att++){ // iterate through jsonArray 
	JSONObject asset_att_Object = asset_Attributes.getJSONObject(att);
	log.info(&quot;asset_att_Object:&quot; + asset_att_Object.toString());
	if(asset_att_Object.getString(&quot;dataParamName&quot;) == &apos;ownerReference_PartySiteID&apos;) {owner = asset_att_Object.getString(&quot;value&quot;)}
	if(asset_att_Object.getString(&quot;dataParamName&quot;) == &apos;referenceNumber&apos;) {ref_no = asset_att_Object.getString(&quot;value&quot;)}
//	if(asset_att_Object.getString(&quot;dataParamName&quot;) == &apos;modelName&apos;) {model_no = asset_att_Object.getString(&quot;value&quot;)}
	if(asset_att_Object.getString(&quot;dataParamName&quot;) == &apos;creationDate&apos;) {creation_date = asset_att_Object.getString(&quot;value&quot;)}
}

cal_owner = vars.get(&quot;T1_new_owner&quot;);
if(cal_owner == null || cal_owner == &apos;&apos;) {final_owner = owner} else {final_owner = cal_owner};
cal_ref = vars.get(&quot;T1_new_listee&quot;);
if(cal_ref == null || cal_ref == &apos;&apos;) {final_ref = ref_no} else {final_ref = cal_ref};
//cal_mod = vars.get(&quot;new_model_no&quot;);
//if(cal_mod == null || cal_mod == &apos;&apos;) {final_model = model_no} else {final_model = cal_mod};
//cal_create_date = vars.get(&quot;new_creation_date&quot;);
cal_create_date = new Date().format(&apos;yyyy-MM-dd&apos;);
if (cal_create_date == null || cal_create_date.isEmpty() ) {final_creation_date = vars.get(&quot;creation_date&quot;)} else {final_creation_date = cal_create_date}
vars.put(&quot;creation_date&quot;, cal_create_date);
cal_rep_date = vars.get(&quot;new_report_date&quot;);

//////////////////////////////////////////////////////
//Create Colletion Attributes Object
/////////////////////////////////////////////////////

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result.append(&quot;\&quot;name\&quot; : \&quot;Collection Name\&quot;,&quot;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;collectionName\&quot;,&quot;);
result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+collection_name+&quot;\&quot;,&quot;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result.append(&quot;},&quot;);
result.append(&quot;{&quot;);
result.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result.append(&quot;\&quot;name\&quot; : \&quot;Project Number\&quot;,&quot;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;projectNumber\&quot;,&quot;);
result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+collection_project+&quot;\&quot;,&quot;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result.append(&quot;},&quot;);
result.append(&quot;{&quot;);
result.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result.append(&quot;\&quot;name\&quot; : \&quot;Quote Number\&quot;,&quot;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;quoteNumber\&quot;,&quot;);
result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+collection_quote+&quot;\&quot;,&quot;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result.append(&quot;},&quot;);
result.append(&quot;{&quot;);
result.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result.append(&quot;\&quot;name\&quot; : \&quot;Order Number\&quot;,&quot;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;orderNumber\&quot;,&quot;);
result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+collection_order+&quot;\&quot;,&quot;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result.append(&quot;}&quot;);
//result.append(&quot;]&quot;);
vars.put(&quot;T1_Asset_Collection&quot;, result.toString());
//log.info(&quot;T1_Asset_Collection: &quot; + result.toString());

//////////////////////////////////////////////////////
//Create Empty Collection Attributes
///////////////////////////////////////////////////////

StringBuilder result_empty = new StringBuilder();

result_empty.append(&quot;{&quot;);
result_empty.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;name\&quot; : \&quot;Collection Name\&quot;,&quot;);
result_empty.append(&quot;\&quot;dataParamName\&quot; : \&quot;collectionName\&quot;,&quot;);
result_empty.append(&quot;\&quot;value\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result_empty.append(&quot;},&quot;);
result_empty.append(&quot;{&quot;);
result_empty.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;name\&quot; : \&quot;Project Number\&quot;,&quot;);
result_empty.append(&quot;\&quot;dataParamName\&quot; : \&quot;projectNumber\&quot;,&quot;);
result_empty.append(&quot;\&quot;value\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result_empty.append(&quot;},&quot;);
result_empty.append(&quot;{&quot;);
result_empty.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;name\&quot; : \&quot;Quote Number\&quot;,&quot;);
result_empty.append(&quot;\&quot;dataParamName\&quot; : \&quot;quoteNumber\&quot;,&quot;);
result_empty.append(&quot;\&quot;value\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result_empty.append(&quot;},&quot;);
result_empty.append(&quot;{&quot;);
result_empty.append(&quot;\&quot;uom\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;name\&quot; : \&quot;Order Number\&quot;,&quot;);
result_empty.append(&quot;\&quot;dataParamName\&quot; : \&quot;orderNumber\&quot;,&quot;);
result_empty.append(&quot;\&quot;value\&quot; : \&quot;\&quot;,&quot;);
result_empty.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;&quot;);
result_empty.append(&quot;}&quot;);
//result.append(&quot;]&quot;);
vars.put(&quot;T1_Empty_Collection&quot;, result_empty.toString());
//log.info(&quot;T1_Asset_Collection: &quot; + result.toString());


//////////////////////////////////////////////////////////
//Update COllection Attributes and other attributes Object
//////////////////////////////////////////////////////////
String getAttToken = vars.get(&quot;T1_Asset_Attributes&quot;);
JSONArray newArray = new JSONArray(getAttToken);
//log.info(&quot;Output array : &quot; + newArray);

for (int i=0; i &lt; newArray.length(); i++){
    JSONObject itemArr = new JSONObject(newArray.get(i).toString());
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;collectionName&quot;)){
        itemArr.put(&quot;value&quot;, collection_name);
        newArray.put(i, itemArr);
    } 
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;projectNumber&quot;)){
        itemArr.put(&quot;value&quot;, collection_project);
        newArray.put(i, itemArr);
    } 
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;quoteNumber&quot;)){
        itemArr.put(&quot;value&quot;, collection_quote);
        newArray.put(i, itemArr);
    } 
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;orderNumber&quot;)){
        itemArr.put(&quot;value&quot;, collection_order);
        newArray.put(i, itemArr);
    }    
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;ownerReference_PartySiteID&quot;)){
        itemArr.put(&quot;value&quot;, final_owner);
        newArray.put(i, itemArr);
    }    
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;referenceNumber&quot;)){
        itemArr.put(&quot;value&quot;, final_ref);
        newArray.put(i, itemArr);
    }
//    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;modelName&quot;)){
//        itemArr.put(&quot;value&quot;, final_model);
//        newArray.put(i, itemArr);
//    }
    if(itemArr.get(&quot;dataParamName&quot;).toString().equals(&quot;creationDate&quot;)){
        itemArr.put(&quot;value&quot;, final_creation_date);
        newArray.put(i, itemArr);
    }   
}

vars.put(&quot;T1_Asset_Attributes_Modified&quot;, newArray.toString());
//log.info(&quot;Output array : &quot; + newArray);


//////////////////////////
//Update Taxonomy Object
//////////////////////////
String getAttToken_tax = vars.get(&quot;T1_Asset_Taxonomy&quot;);
JSONArray newArray_tax = new JSONArray(getAttToken_tax);
//log.info(&quot;Output array : &quot; + newArray);

for (int t=0; t &lt; newArray_tax.length(); t++){
    JSONObject itemArr_tax = new JSONObject(newArray_tax.get(t).toString());
    if(itemArr_tax.get(&quot;dataParamName&quot;).toString().equals(&quot;ownerReference_PartySiteID&quot;)){
        itemArr_tax.put(&quot;value&quot;, final_owner);
        newArray_tax.put(t, itemArr_tax);
    }
    if(itemArr_tax.get(&quot;dataParamName&quot;).toString().equals(&quot;referenceNumber&quot;)){
        itemArr_tax.put(&quot;value&quot;, final_ref);
        newArray_tax.put(t, itemArr_tax);
    }
//    if(itemArr_tax.get(&quot;dataParamName&quot;).toString().equals(&quot;modelName&quot;)){
//       itemArr_tax.put(&quot;value&quot;, final_model);
//       newArray_tax.put(t, itemArr_tax);
//    }
    if(itemArr_tax.get(&quot;dataParamName&quot;).toString().equals(&quot;creationDate&quot;)){
        itemArr_tax.put(&quot;value&quot;, final_creation_date);
        newArray_tax.put(t, itemArr_tax);
    }
}
vars.put(&quot;T1_Asset_Taxonomy_Modified&quot;, newArray_tax.toString());



//////////////////////////////////////////////////////////////////////////////
//Update Asset-content-Type Object
//////////////////////////////////////////////////////////////////////////////
//String getAttToken_con = vars.get(&quot;T1_Asset_Attributes_Content_Type&quot;);
//if (getAttToken_con != &quot;&quot;){
//	JSONArray newArray_con = new JSONArray(getAttToken_con);
//
//for (int c=0; c &lt; newArray_con.length(); c++){
//    JSONObject itemArr_con = new JSONObject(newArray_con.get(c).toString());
//    if(itemArr_con.get(&quot;dataParamName&quot;).toString().equals(&quot;modelNomenclature&quot;)){
//        itemArr_con.put(&quot;value&quot;, final_model_nm);
//        newArray_con.put(c, itemArr_con);
//    }
//}
//
//vars.put(&quot;T1_Asset_Attributes_Content_Type_Modified&quot;, newArray_con.toString());
//}
//else if (getAttToken_con == &quot;&quot; &amp;&amp; cal_mod_nm != &quot;&quot;){
//	JSONObject con_obj = new JSONObject();
//
//	con_obj.put(&quot;uom&quot;, &quot;N/A&quot;);
//	con_obj.put(&quot;name&quot;, &quot;Model Nomenclature&quot;);
//	con_obj.put(&quot;seq&quot;, &quot;1&quot;);
//	con_obj.put(&quot;value&quot;, &quot;&quot;+final_model_nm+&quot;&quot;);
//	con_obj.put(&quot;dataParamName&quot;, &quot;modelNomenclature&quot;);
//	con_obj.put(&quot;dataGroup&quot;, &quot;&quot;);
//	
//	vars.put(&quot;T1_Asset_Attributes_Content_Type_Modified&quot;, con_obj.toString());
//} else{
//	vars.put(&quot;T1_Asset_Attributes_Content_Type_Modified&quot;, &quot;&quot;);
//}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//To Remove square brackets at beginning and ending of JSON response
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

String getToken = vars.get(&quot;T1_Asset_Attributes_Modified&quot;);
getToken = getToken.replaceAll(/^\[(.+)\]$/,&apos;$1&apos;);
vars.put(&quot;T1_Asset_Attributes_Modified&quot;,getToken);

String getToken_content = vars.get(&quot;T1_Asset_Attributes_Content_Type&quot;);
getToken_content = getToken_content.replaceAll(/^\[(.+)\]$/,&apos;$1&apos;);
vars.put(&quot;T1_Asset_Attributes_Content_Type_Modified&quot;,getToken_content);

String getToken_taxo = vars.get(&quot;T1_Asset_Taxonomy_Modified&quot;);
getToken_taxo = getToken_taxo.replaceAll(/^\[(.+)\]$/,&apos;$1&apos;);
vars.put(&quot;T1_Asset_Taxonomy_Modified&quot;,getToken_taxo);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_model_creation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;asset\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;assetId\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ulAssetId\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;collectionId\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Hierarchy blob starts here
result.append(&quot;\&quot;hierarchy\&quot; : &quot;);
result.append(&apos;\n&apos;);
result.append(&apos;${T1_Asset_Hierarchy}&apos;);
result.append(&apos;\n&apos;);
result.append(&quot;,&quot;);
result.append(&apos;\n&apos;);
//Hierarchy blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////Taxonomy blob starts here
result.append(&quot;\&quot;taxonomy\&quot; : [&quot;);
result.append(&apos;\n&apos;);
//To remove backslash from the JSON response for eg - &quot;Family\/Series&quot; --&gt; &quot;Family/Series&quot;
if (${__unescape(&apos;$T1_Asset_Taxonomy_Modified&apos;)} != &quot;&quot;){
	//To remove backslash from the JSON response for eg - &quot;Family\/Series&quot; --&gt; &quot;Family/Series&quot;
	String asset_taxo = &quot;T1_Asset_Taxonomy_Modified&quot;;
	String T1_Ass_Taxo = vars.get(asset_taxo); 
	result.append(T1_Ass_Taxo.replaceAll(&quot;\\&apos;&quot;, &quot;\\\\&apos;&quot;).replaceAll(&quot;//&apos;&quot;, &quot;////&apos;&quot;));
	//result.append(T1_Ass_Taxo);
}
result.append(&apos;\n&apos;);
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);
////Taxonomy blob ends here
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////attributes blob ends here
result.append(&quot;\&quot;attributes\&quot; : [&quot;);
result.append(&apos;\n&apos;);
//To remove backslash from the JSON response for eg - &quot;Family\/Series&quot; --&gt; &quot;Family/Series&quot;
if (${__unescape(&apos;$T1_Asset_Attributes_Modified&apos;)} != &quot;&quot;){
	//To remove backslash from the JSON response for eg - &quot;Family\/Series&quot; --&gt; &quot;Family/Series&quot;
	String asset_att = &quot;T1_Asset_Attributes_Modified&quot;;
	String T1_Ass_Att = vars.get(asset_att); 
	result.append(T1_Ass_Att.replaceAll(&quot;\\&apos;&quot;, &quot;\\\\&apos;&quot;).replaceAll(&quot;//&apos;&quot;, &quot;////&apos;&quot;));
//	result.append(T1_Ass_Att.replaceAll(&quot;\\&apos;&quot;, &quot;\\\\&apos;&quot;).replaceAll(&quot;//&apos;&quot;, &quot;////&apos;&quot;).replaceAll(&quot;&apos;&apos;&quot;, &quot;//&apos;&apos;&quot;));
	result.append(&apos;,&apos;);
}
//result.append(${__unescape(&apos;${T1_Asset_Attributes}&apos;)});
if (${__unescape(&apos;$T1_Asset_Attributes_Content_Type_Modified&apos;)} != &quot;&quot;){
	//To remove backslash from the JSON response for eg - &quot;Family\/Series&quot; --&gt; &quot;Family/Series&quot;
	String con_typ = &quot;T1_Asset_Attributes_Content_Type_Modified&quot;;
	String T1_Asset_Cont_Type = vars.get(con_typ); 
	result.append(T1_Asset_Cont_Type.replaceAll(&quot;\\&apos;&quot;, &quot;\\\\&apos;&quot;).replaceAll(&quot;//&apos;&quot;, &quot;////&apos;&quot;));
	if (T1_Asset_Cont_Type != &quot;&quot;){
		result.append(&apos;,&apos;);	
	}
}
String src = &quot;T1_Asset_Collection_Id&quot;;
String source = vars.get(src);
if (source == &quot;&quot;){
	result.append(${__unescape(&apos;${T1_Asset_Collection}&apos;)});
	result.append(&apos;,&apos;);			
}
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;uom\&quot; : \&quot;N/A\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;metadataId\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;seq\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${metadataId}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;],&quot;);
////attributes blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;hasComponents\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;collectionAttributes\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(${__unescape(&apos;${T1_Asset_Collection}&apos;)});
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;user\&quot; : \&quot;${T1_new_employee_number}\&quot;&quot;);
//We can handle user creation in two different ways
//result.append(&quot;\&quot;user\&quot; : \&quot;Global\\\\\\\00000\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData_asset&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_New_Asset_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..assetId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Collection_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_New_Collection_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.collectionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Asset-id in CSV file" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;asset_id&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));

product_type = val2_asset_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//ass_owner = val2_asset_taxo[1];
//if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
asset_owner = vars.get(&quot;T1_new_owner&quot;);
//ref_no = val2_asset_taxo[2];
//if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref = vars.get(&quot;T1_new_listee&quot;);
family_series = val2_asset_taxo[3];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[4];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//create_date = val2_asset_taxo[5];
//if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
creation_date= vars.get(&quot;creation_date&quot;);

/// Get the variable(s) from the JMeter script
message = vars.get(&quot;T1_Asset_Message&quot;);
asset = vars.get(&quot;T1_New_Asset_ID&quot;);
new_asset_id=&quot;&quot;;
if(asset.isEmpty()) {new_asset_id = message.trim().toString()} else {new_asset_id = asset.trim().toString()};


String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, new_asset_id);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;04_list_of_assets.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Standard Assignment_NoEvalReqd" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;projectNumber&quot;: &quot;${T1_new_project_number}&quot;,&#xd;
    &quot;scope&quot;: &quot;&quot;,&#xd;
    &quot;items&quot;: [&#xd;
        {&#xd;
            &quot;assessmentId&quot;: &quot;&quot;,&#xd;
            &quot;hierarchyId&quot;: &quot;ge28b891-a43e-4f59-9f15-2554f93359fe&quot;,&#xd;
            &quot;hierarchy&quot;: [],&#xd;
            &quot;remarks&quot;: {&#xd;
                &quot;comments&quot;: &quot;Product Created with AUTHorizedCopy&quot;,&#xd;
                &quot;reasonCode&quot;: &quot;Similar to existing model, no evaluation required&quot;,&#xd;
                &quot;user&quot;: &quot;${T1_new_employee_number}&quot;,&#xd;
                &quot;relatedInfo&quot;: []&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;removed&quot;: [],&#xd;
    &quot;user&quot;: &quot;${T1_new_employee_number}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/assets/${T1_New_Asset_ID}/standards</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Assessment_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Assessment_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[*].assessmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete Evaluation" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;completed&quot;: &quot;N&quot;,&#xd;
    &quot;certified&quot;: [&#xd;
        {&#xd;
            &quot;assessmentId&quot;: &quot;${T1_Assessment_ID}&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;notCertified&quot;: [],&#xd;
    &quot;user&quot;: &quot;${T1_new_employee_number}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/collections/${T1_New_Collection_ID}/standards/evaluations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete Collection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;completed&quot;: &quot;Y&quot;,&#xd;
    &quot;certified&quot;: [],&#xd;
    &quot;notCertified&quot;: [],&#xd;
    &quot;user&quot;: &quot;${T1_new_employee_number}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/collections/${T1_New_Collection_ID}/standards/evaluations</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Status JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Collection_Complete in CSV file" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Eval_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));

product_type = val2_asset_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ass_owner = val2_asset_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot; &quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref_no = val2_asset_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
family_series = val2_asset_taxo[3];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[4];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
create_date = val2_asset_taxo[5];
if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
asset = val2_asset_taxo[6];
if(asset == null || asset.isEmpty()) {asset_id = &quot;Empty Value for Asset-ID&quot;} else {asset_id = asset.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
col = val2_asset_taxo[7];
if(col == null || col.isEmpty()) {col_id = &quot;Empty Value for Collection-ID&quot;} else {col_id = col.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
assessment = val2_asset_taxo[8];
if(col == null || col.isEmpty()) {assessment_id = &quot;Empty Value for Assessment-ID&quot;} else {assessment_id = col.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
compliance = val2_asset_taxo[9];
if(compliance == null || compliance.isEmpty()) {eval_compliance = &quot;&quot;} else {eval_compliance = compliance.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
evaluation_result = val2_asset_taxo[10];
if(evaluation_result == null || evaluation_result.isEmpty()) {eval_result = &quot;&quot;} else {eval_result = evaluation_result.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
user_name = val2_asset_taxo[-1];
if(user_name == null || user_name.isEmpty()) {user = &quot;&quot;} else {user = user_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

// Get the variable(s) from the JMeter script
message = vars.get(&quot;T1_Asset_Message&quot;);
status = vars.get(&quot;T1_Status&quot;);
if(message!=&quot;OK&quot;) {collection_status = message.toString()} else {collection_status = status.trim().toString()};


String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, asset_id, col_id, assessment_id, eval_compliance, eval_result, collection_status, user);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;02_5_list_of_completed_collection.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="05a.Generate Asset-cert-Link with Old cert" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset-Cert-Link list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String product_type = &quot;Product-Type&quot;;
String owner = &quot;Owner&quot;;
String ref_no = &quot;Reference-Number&quot;;
String model_no = &quot;Model-Name&quot;;
String family = &quot;Series&quot;;
String creation_date = &quot;Creation-Date&quot;;
String cert_type = &quot;Certificate-Type&quot;;
String cert_body = &quot;Certificate-Body&quot;;
String cert_mark = &quot;Certificate-Mark&quot;;
String cert_no = &quot;Certificate-Name&quot;;
String rev_no = &quot;Certificate-Revision-No&quot;;
String cert_owner = &quot;Certificate-Owner&quot;;

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;05a_list_of_asset_cert_link.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Associated_Assets" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;01a_list_of_assets.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Asset_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

product_type = val2_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type};
vars.put(&quot;product_type&quot;, prod_type);

ass_owner = vars.get(&quot;T1_new_owner&quot;);
if(ass_owner == null || ass_owner.isEmpty()) {owner = &quot;&quot;} else {owner = ass_owner};
vars.put(&quot;owner_ref&quot;, owner);

ref_no = vars.get(&quot;T1_new_listee&quot;);
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no};
vars.put(&quot;ref_no&quot;, ref);

model_no = val2_taxo[3];
model = model_no.replaceAll(&apos;^\&quot;+|\&quot;+$&apos;, &quot;&quot;).trim();
vars.put(&quot;model_no&quot;, model);

family_series = val2_taxo[4];
if(family_series == null || family_series == &apos;&apos;) {series = &quot;&quot;} else {series = family_series};
vars.put(&quot;series&quot;, series);

cal_create_date = new Date().format(&apos;yyyy-MM-dd&apos;);
if (cal_create_date == null || cal_create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = cal_create_date}
vars.put(&quot;creation_date&quot;, creation_date);

certificate_type = val2_taxo[6].trim().replace(&apos;^&apos;,&apos;,&apos;).toString();
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type};
vars.put(&quot;certificate_type&quot;, cert_type);

certificate_body = val2_taxo[7].trim().toString();
if(certificate_body == null || certificate_body.isEmpty()) {cert_body = &quot;&quot;} else {cert_body = certificate_body};
vars.put(&quot;certificate_body&quot;, cert_body);

certificate_mark = val2_taxo[8].trim().toString();
if(certificate_mark == null || certificate_mark.isEmpty()) {cert_mark = &quot;&quot;} else {cert_mark = certificate_mark};
vars.put(&quot;certificate_mark&quot;, cert_mark);

certificate_number = val2_taxo[9].trim().toString();
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number};
vars.put(&quot;certificate_number&quot;, cert_no);

rev_number = val2_taxo[10].trim().replace(&apos;^&apos;,&apos;,&apos;).toString();
if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number};
vars.put(&quot;rev_number&quot;, rev_no);

certificate_owner = vars.get(&quot;T1_new_owner&quot;);
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner};
vars.put(&quot;certificate_owner&quot;, cert_owner);

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, series, creation_date, cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner);
				
FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;05a_list_of_asset_cert_link.tsv&quot;, true);

writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="05b.Generate Asset-cert-Link with New cert" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset-Cert-Link list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String product_type = &quot;Product-Type&quot;;
String owner = &quot;Owner&quot;;
String ref_no = &quot;Reference-Number&quot;;
String model_no = &quot;Model-Name&quot;;
String family = &quot;Series&quot;;
String creation_date = &quot;Creation-Date&quot;;
String cert_type = &quot;Certificate-Type&quot;;
String cert_body = &quot;Certificate-Body&quot;;
String cert_mark = &quot;Certificate-Mark&quot;;
String cert_no = &quot;Certificate-Name&quot;;
String rev_no = &quot;Certificate-Revision-No&quot;;
String cert_owner = &quot;Certificate-Owner&quot;;
String new_cert_no = &quot;New-Certificate-Name&quot;;

String[] params = Arrays.asList(product_type, owner, ref_no, model_no, family, creation_date, cert_type, cert_body, cert_mark, cert_no, rev_no, cert_owner,new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;05b_list_of_asset_cert_link.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_asset_cert_link" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;05a_list_of_asset_cert_link.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Asset_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Certificate_id" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;03_list_of_certificate_id.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Cert_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Cert_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;cert_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
///Start with the first line of data and get asset data
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_asset_taxo = value_asset_taxo.substring(1, value_asset_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));
log.info(&quot;val2_asset_taxo before:&quot; + val2_asset_taxo.toString());

product_type = val2_asset_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ass_owner = val2_asset_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref_no = val2_asset_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[3];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
family_series = val2_asset_taxo[4];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
create_date = val2_asset_taxo[5];
if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_type = val2_asset_taxo[6];
if(certificate_type == null || certificate_type.isEmpty()) {link_cert_type = &quot;&quot;} else {link_cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = val2_asset_taxo[7];
if(certificate_body == null || certificate_body.isEmpty()) {link_body = &quot;&quot;} else {link_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark = val2_asset_taxo[8];
if(certificate_mark == null || certificate_mark.isEmpty()) {link_mark = &quot;&quot;} else {link_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_no = val2_asset_taxo[9];
if(certificate_no == null || certificate_no.isEmpty()) {link_cert_name = &quot;&quot;} else {link_cert_name = certificate_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_asset_taxo[11];
if(certificate_owner == null || certificate_owner.isEmpty()) {link_cert_owner = &quot;&quot;} else {link_cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};


for (int a=0; a&lt;${cert_loop_count}; a++) {
	int V = a+1;
	String v = &quot;Cert_Line_data&quot;;
	String w = new Integer (V).toString();	
	String x = v+w;
	String value_cert_taxo = vars.get(x);
	ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));
	log.info(&quot;val2_cert_taxo before:&quot; + val2_cert_taxo.toString());
	certificate_type = val2_cert_taxo[0];
	if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_body = val2_cert_taxo[1];
	if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_mark = val2_cert_taxo[2];
	if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_number = val2_cert_taxo[3];
	if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	rev_number = val2_cert_taxo[4];
	if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_owner = val2_cert_taxo[5];
	if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//	certificate_id = val2_cert_taxo[6];
//	if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//	new_certificate_number = val2_cert_taxo[7];
//	if(new_certificate_number == null || new_certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	
	if ((link_cert_type == cert_type) &amp; (link_cert_name == cert_no) &amp; (asset_owner == cert_owner)) {
		new_certificate_number = val2_cert_taxo[7];
		if(new_certificate_number == null || new_certificate_number.isEmpty()) {cert_no_updated = &quot;&quot;} else {cert_no_updated = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	 }   
	 
}

String[] params = Arrays.asList(prod_type, asset_owner, ref, model, series, creation_date, link_cert_type, link_body, link_mark, link_cert_name, rev_no, cert_owner,cert_no_updated);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;05b_list_of_asset_cert_link.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="06a.Asset_Id Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler_List_of_Associated_Assets" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;05b_list_of_asset_cert_link.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Asset_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data_&quot; + counter, (line));
	counter++;
}
//counter-4 indicates we start asset creation from line number 4 in the csv file as this will avoid first four line with &quot;uom, dataParamName, seq, name&quot;  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;asset_id&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String prod_type = &quot;Product Type&quot;;
String owner = &quot;Owner reference&quot;;
String ref = &quot;Reference Number&quot;;
String series = &quot;Family-Series&quot;;
String model = &quot;Model Name&quot;;
String creation_date = &quot;Creation Date&quot;;
String cert_name = &quot;Certificate Number&quot;;
//String user = &quot;User&quot;;
String asset_id = &quot;Asset_ID&quot;;
String ul_asset_id = &quot;UL_Asset_ID&quot;;
String col_id = &quot;Collection_ID&quot;;


String[] params = Arrays.asList(prod_type, owner, ref, series, model, creation_date, cert_name, asset_id, ul_asset_id, col_id);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06a_list_of_appended_asset_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);


//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${grant_type}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${scope}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
//String val1_taxo = value_taxo.substring(1, value_taxo.length()-1);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

product_type = val2_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;product_type&quot;, prod_type);

ass_owner = val2_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;owner_ref&quot;, asset_owner);

ref_no = val2_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;ref_no&quot;, ref);

model_no = val2_taxo[3];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;model_no&quot;, model);

family_series = val2_taxo[4];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;series&quot;, series);

SimpleDateFormat csv_taxo_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
try {
	Date taxo_parsedDate = csv_taxo_date.parse(val2_taxo[5].replace(&quot;\&quot;&quot;, &quot;&quot;).trim());
	SimpleDateFormat taxo_json_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	created_date = taxo_json_date.format(taxo_parsedDate)
	creation_date = created_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim();
}
catch (ParseException Unparseableex) 
	{
		creation_date = &quot;&quot;;
	}
vars.put(&quot;creation_date&quot;, creation_date);

off_set = &quot;${offset}&quot;
if(off_set == null || off_set.isEmpty()) {offset = &quot;&quot;} else {offset = off_set.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_offset&quot;, offset);
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 Paginated Search Asset" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/assets/summary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_model_creation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.json.JSONObject;
import org.json.JSONArray;
import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import org.json.JSONException;
import org.json.simple.*

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;searchText\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\\${T1_new_employee_number}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;offset\&quot; : \&quot;${T1_offset}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;rows\&quot; : \&quot;400\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;orderBy\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;completed\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;accepted\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;isPLAsset\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;modelNomenclature\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromDate\&quot; : \&quot;${creation_date}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toDate\&quot; : \&quot;${creation_date}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromCreatedDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toCreatedDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromModifiedDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toModifiedDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//searchParameters blob starts here
result.append(&quot;\&quot;searchParameters\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${product_type}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReference_PartySiteID\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_owner}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;referenceNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_listee}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;family_Series\&quot; : {&quot;);
result.append(&apos;\n&apos;)
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${series}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;modelName\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${model_no}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;collectionName\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;projectNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_project_number}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;quoteNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;orderNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
//searchParameters blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productTypeList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReferenceList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;referenceNumberList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;family_SeriesList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;facet\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;productType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;family_Series\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;ownerReference_PartySiteID\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;referenceNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset_Block JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Block</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..asset</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">children</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

JSONArray asset_Version = new JSONArray(vars.get(&quot;T1_Asset_Block&quot;).toString()); 
int asset_ver_count = asset_Version.length(); // get totalCount of all jsonObjects
List&lt;String&gt; asset_ver_final_list_value = new ArrayList&lt;String&gt;();
for(int ver=0 ; ver &lt; asset_ver_count; ver++){ // iterate through jsonArray 
	JSONObject asset_version_Object = asset_Version.getJSONObject(ver);
	String asset_version_value = asset_version_Object.getString(&quot;assetVersion&quot;); 
	String asset_id_value = asset_version_Object.getString(&quot;assetId&quot;); 
	String collection_id_value = asset_version_Object.getString(&quot;collectionId&quot;); 	
	String asset_status_value = asset_version_Object.getString(&quot;status&quot;);
	String asset_source_value = asset_version_Object.getString(&quot;source&quot;); 
	String ul_asset_id_value = asset_version_Object.getString(&quot;ulAssetId&quot;); 
	//String asset_user_value = asset_version_Object.getString(&quot;createdBy&quot;); 
	asset_ver_final_list_value.add(&quot;0&quot;);	
	List&lt;String&gt; asset_ver_list_value = new ArrayList&lt;String&gt;();
	asset_ver_list_value.add(asset_version_value);	
	asset_ver_list_value.add(asset_id_value);	
	asset_ver_list_value.add(collection_id_value);	
	asset_ver_list_value.add(asset_status_value); 
	asset_ver_list_value.add(ul_asset_id_value); 
	//asset_ver_list_value.add(asset_user_value); 
	asset_ver_list_value.add(asset_source_value);  //log.info(&quot;asset_ver_list_value:&quot; + asset_ver_list_value.toString());	
	if(asset_ver_final_list_value[0] &lt;= asset_ver_list_value[0]) {
		asset_ver_final_list_value = asset_ver_list_value		  	
	}
}
//log.info(&quot;asset_ver_final_list_value:&quot; + asset_ver_final_list_value.toString());
vars.put(&quot;T1_Asset_ID&quot;, asset_ver_final_list_value[1].toString());
vars.put(&quot;T1_Collection_ID&quot;, asset_ver_final_list_value[2].toString());
vars.put(&quot;T1_Status&quot;, asset_ver_final_list_value[3].toString());
vars.put(&quot;T1_UL_Asset_ID&quot;, asset_ver_final_list_value[4].toString());
//vars.put(&quot;T1_User&quot;, asset_ver_final_list_value[5].toString());
vars.put(&quot;T1_Source&quot;, asset_ver_final_list_value[5].toString());

Asset_Block = &quot;&quot;;
vars.put(&quot;T1_Asset_Block&quot;, Asset_Block);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Asset_Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_asset_count</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..totalCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">children</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Asset-id in CSV file" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;asset_id&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_asset_taxo = value_asset_taxo.substring(1, value_asset_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));

product_type = val2_asset_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ass_owner = val2_asset_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref_no = val2_asset_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
family_series = val2_asset_taxo[4];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[3];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.trim()};
create_date = val2_asset_taxo[5];
if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
cert_no = val2_asset_taxo[9];
if(cert_no == null || cert_no.isEmpty()) {cert_name = &quot;&quot;} else {cert_name = cert_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

code = vars.get(&quot;T1_asset_count&quot;);
if(code == &apos;0&apos;) {
	user = &quot;User_Not_Found&quot;;
	asset_id = &quot;Asset_ID_Not_Found&quot;;
	col_id = &quot;Collection_ID_Not_Found&quot;;
	ul_ass_id = &quot;UL_Asset_ID_Not_Found&quot;;
} else {
//	asset_user = vars.get(&quot;T1_User&quot;);
//	if(asset_user == null || asset_user.isEmpty()) {user = &quot;User_Not_Found&quot;} else {user = asset_user.trim().toString()};
	asset = vars.get(&quot;T1_Asset_ID&quot;);
	if(asset == null || asset.isEmpty()) {asset_id = &quot;Asset_ID_Not_Found&quot;} else {asset_id = asset.trim().toString()};
	collection = vars.get(&quot;T1_Collection_ID&quot;);
	if(collection == null ||  collection.isEmpty()) {col_id = &quot;Collection_ID_Not_Found&quot;} else {col_id = collection.trim().toString()};
	ul_asset_id = vars.get(&quot;T1_UL_Asset_ID&quot;);
	if(ul_asset_id == null || ul_asset_id.isEmpty()) {ul_ass_id = &quot;UL_Asset_ID_Not_Found&quot;} else {ul_ass_id = ul_asset_id.trim().toString()};
};


String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, cert_no, asset_id, ul_ass_id, col_id);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06a_list_of_appended_asset_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="06b.Certificate_Id Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler_List_of_Associated_Assets" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;05b_list_of_asset_cert_link.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Asset_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data_&quot; + counter, (line));
	counter++;
}
//counter-4 indicates we start asset creation from line number 4 in the csv file as this will avoid first four line with &quot;uom, dataParamName, seq, name&quot;  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certificate_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate_ID&quot;;
String new_cert_no = &quot;New_Certificate Name&quot;;

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_id, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06b_list_of_appended_certificate_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${grant_type}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${scope}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
//String val1_taxo = value_taxo.substring(1, value_taxo.length()-1);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

certificate_type = val2_taxo[6];
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_type&quot;, cert_type);

certificate_body = val2_taxo[7];
if(certificate_body == null || certificate_body.isEmpty()) {cert_body = &quot;&quot;} else {cert_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_body&quot;, cert_body);

certificate_mark = val2_taxo[8];
if(certificate_mark == null || certificate_mark.isEmpty()) {cert_mark = &quot;&quot;} else {cert_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_mark&quot;, certificate_mark);

certificate_num = val2_taxo[12];
if(certificate_num == null || certificate_num.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_num.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_name&quot;, cert_no);

certificate_owner = val2_taxo[11];
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_owner&quot;, cert_owner);

off_set = &quot;${offset}&quot;
if(off_set == null || off_set.isEmpty()) {offset = &quot;&quot;} else {offset = off_set.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_offset&quot;, offset);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 Paginated Search Cert" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/certificates/summary</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Paginated Certificate Search </stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_cert_body" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;searchText\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\\50696\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;offset\&quot; : \&quot;${T1_offset}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;rows\&quot; : \&quot;400\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;orderBy\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;isPLCertificate\&quot; : \&quot;N\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;latestCompletedCertificate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//searchParameters blob starts here
result.append(&quot;\&quot;searchParameters\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccn\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fileNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&quot;\&quot;mark\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${certificate_mark}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBody\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${certificate_body}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReference\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${certificate_owner}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateName\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${certificate_name}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${certificate_type}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
//searchParameters blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;statusList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateTypeList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReferenceList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBodyList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;markList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccnList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;facet\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;certificateType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issuingBody\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;ccn\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partySiteNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issueDate\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partiesRelationshipType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;fileNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;volume\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;section\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;status\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_cert_Total_Count JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Cert_Total_Count</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..totalCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_List_of_cert JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_List_of_Cert</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..Certificate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Certificate_Id JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Certificate_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.Certificate[*].certificateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract Unique cert and Store" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));

//document_id = val2_cert_taxo[1];
//if(document_id == null || document_id.isEmpty()) {doc_id = &quot;Empty Value for Document-ID&quot;} else {doc_id = document_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_type = val2_cert_taxo[6];
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = val2_cert_taxo[7];
if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark = val2_cert_taxo[8];
if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;Empty-Value-For-Mark&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_number = val2_cert_taxo[9];
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
rev_number = val2_cert_taxo[10];
if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_cert_taxo[11];
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_id = vars.get(&quot;T1_Certificate_ID&quot;);
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
new_certificate_number = val2_cert_taxo[12];
if(new_certificate_number == null || new_certificate_number.isEmpty()) {new_cert_no = &quot;&quot;} else {new_cert_no = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, cert_owner, cert_id, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06b_list_of_appended_certificate_id.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();
</stringProp>
              <stringProp name="TestPlan.comments">Get List of Base Asset Associated with Base certificate</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="06c.Asset &amp; Certificate consolidation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler_Asset_Read" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;06a_list_of_appended_asset_id.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Asset_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Asset_Line_data_&quot; + counter, (line));
	counter++;
}
vars.put(&quot;asset_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler_Certificate_Read" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;06b_list_of_appended_certificate_id.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Cert_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Cert_Line_data_&quot; + counter, (line));
	counter++;
}
vars.put(&quot;cert_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset_Link_To_Certificate list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String prod_type = &quot;Product Type&quot;;
String asset_owner = &quot;Owner reference&quot;;
String ref = &quot;Reference Number&quot;;
String series = &quot;Family-Series&quot;;
String model = &quot;Model Name&quot;;
String creation_date = &quot;Creation Date&quot;;
String cert_name = &quot;Old-Certificate Name&quot;;
String asset_id = &quot;Asset_ID&quot;;
String ul_ass_id = &quot;UL_Asset_ID&quot;;
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String rev_no = &quot;Revision Number&quot;;
String cert_id = &quot;Certificate_ID&quot;;
String new_cert_name = &quot;New_Certificate_Name&quot;;


String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, cert_name, asset_id, ul_ass_id, cert_type, body, mark, rev_no, cert_id, new_cert_name);


FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06c_list_of_asset_link_to_certificate.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${asset_loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${asset_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
///Start with the first line of data and get asset data
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Asset_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_asset_taxo = value_asset_taxo.substring(1, value_asset_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));
log.info(&quot;val2_asset_taxo before:&quot; + val2_asset_taxo.toString());

product_type = val2_asset_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ass_owner = val2_asset_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref_no = val2_asset_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
family_series = val2_asset_taxo[3];
if(family_series == null || family_series.isEmpty() ) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[4];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
create_date = val2_asset_taxo[5];
if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_no = val2_asset_taxo[6];
if(certificate_no == null || certificate_no.isEmpty()) {cert_name = &quot;&quot;} else {cert_name = certificate_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
asset = val2_asset_taxo[7];
if(asset == null || asset.isEmpty()) {asset_id = &quot;Asset-Id-Not-Found&quot;} else {asset_id = asset.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ul_asset_id = val2_asset_taxo[8];
if(ul_asset_id == null || ul_asset_id.isEmpty()) {ul_ass_id = &quot;UL-Asset-Id-Not-Found&quot;} else {ul_ass_id = ul_asset_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

for (int a=0; a&lt;${cert_loop_count}; a++) {
	int V = a+1;
	String v = &quot;Cert_Line_data_&quot;;
	String w = new Integer (V).toString();	
	String x = v+w;
	String value_cert_taxo = vars.get(x);
	ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));
	log.info(&quot;val2_cert_taxo before:&quot; + val2_cert_taxo.toString());
	certificate_type = val2_cert_taxo[0];
	if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_body = val2_cert_taxo[1];
	if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_mark = val2_cert_taxo[2];
	if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_number = val2_cert_taxo[3];
	if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	rev_number = val2_cert_taxo[4];
	if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_owner = val2_cert_taxo[5];
	if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_id = val2_cert_taxo[6];
	if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	new_certificate_number = val2_cert_taxo[7];
	if(new_certificate_number == null || new_certificate_number.isEmpty()) {new_cert_no = &quot;&quot;} else {new_cert_no = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	
	if ((cert_name == cert_no) &amp; (asset_owner == cert_owner)) {
	 	(val2_cert_taxo).removeAll(val2_asset_taxo);
		List&lt;String&gt; final_List = new ArrayList&lt;String&gt;();
		final_List.addAll(val2_asset_taxo);
		final_List.addAll(val2_cert_taxo);
		log.info(&quot;val2_cert_taxo After :&quot; + val2_cert_taxo.toString());
//	 	log.info(&quot;val2_asset_taxo After:&quot; + val2_asset_taxo.toString());
//	 	log.info(&quot;final_List:&quot; + final_List.toString());
		prod_type = final_List[0];
		if(prod_type == null || prod_type.isEmpty()) {prod_type_updated = &quot;&quot;} else {prod_type_updated = prod_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		ass_owner = final_List[1];
		if(ass_owner == null || ass_owner.isEmpty()) {asset_owner_updated = &quot;&quot;} else {asset_owner_updated = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		ref_no = final_List[2];
		if(ref_no == null || ref_no.isEmpty()) {ref_updated = &quot;&quot;} else {ref_updated = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		family_series = final_List[3];
		if(family_series == null || family_series.isEmpty() ) {series_updated = &quot;&quot;} else {series_updated = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		model_no = final_List[4];
		if(model_no == null || model_no.isEmpty()) {model_updated = &quot;&quot;} else {model_updated = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;)};
		create_date = final_List[5];
		if(create_date == null || create_date.isEmpty()) {creation_date_updated = &quot;&quot;} else {creation_date_updated = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_name = final_List[6];
		if(certificate_name == null || certificate_name.isEmpty()) {cert_name_updated = &quot;&quot;} else {cert_name_updated = certificate_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		asset = final_List[7];
		if(asset == null || asset.isEmpty()) {asset_id_updated = &quot;&quot;} else {asset_id_updated = asset.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		ul_asset_id = final_List[8];
		if(ul_asset_id == null || ul_asset_id.isEmpty()) {ul_ass_id_updated = &quot;&quot;} else {ul_ass_id_updated = ul_asset_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_type = final_List[10];
		if(certificate_type == null || certificate_type.isEmpty()) {cert_type_updated = &quot;&quot;} else {cert_type_updated = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_body = final_List[11];
		if(certificate_body == &quot;&quot; || certificate_body.isEmpty()) {body_updated = &quot;&quot;} else {body_updated = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_mark = final_List[12];
		if(certificate_mark == &quot;&quot; || certificate_mark.isEmpty()) {mark_updated = &quot;&quot;} else {mark_updated = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		rev_number = final_List[13];
		if(rev_number == &quot;&quot; || rev_number.isEmpty()) {rev_no_updated = &quot;&quot;} else {rev_no_updated = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_id = final_List[14];
		if(certificate_id == null || certificate_id.isEmpty()) {cert_id_updated = &quot;Certificate-Not-Found&quot;} else {cert_id_updated = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		new_certificate_name = final_List[15];
		if(new_certificate_name == null || new_certificate_name.isEmpty()) {new_cert_name_updated = &quot;&quot;} else {new_cert_name_updated = new_certificate_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	 }   
	 
}

String[] params = Arrays.asList(prod_type_updated, asset_owner_updated, ref_updated, series_updated, model_updated, creation_date_updated, cert_name_updated, asset_id_updated,  ul_ass_id_updated, cert_type_updated, body_updated, mark_updated, rev_no_updated, cert_id_updated, new_cert_name_updated);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06c_list_of_asset_link_to_certificate.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            <stringProp name="TestPlan.comments">If ${cert_loop_count} != ${asset_loop_count} --&gt; you will see JSR223 Sampler failure with code 500 and that is normal.</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="06d.Link Asset To Certificate" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler_Consolidation Read" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;06c_list_of_asset_link_to_certificate.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;conso_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;conso_Line_data_&quot; + counter, (line));
	counter++;
}
vars.put(&quot;final_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Asset_Certificate_Result list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String prod_type = &quot;Product Type&quot;;
String asset_owner = &quot;Owner reference&quot;;
String ref = &quot;Reference Number&quot;;
String series = &quot;Family-Series&quot;;
String model = &quot;Model Name&quot;;
String creation_date = &quot;Creation Date&quot;;
String cert_name = &quot;Certificate Name&quot;;
//String asset_user = &quot;Asset-User&quot;;
String asset_id = &quot;Asset_ID&quot;;
String ul_ass_id = &quot;UL_Asset_ID&quot;;
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String rev_no = &quot;Revision Number&quot;;
String cert_id = &quot;Certificate_ID&quot;;
String cert_prod_link_status = &quot;Link_Status&quot;;


String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, cert_name, asset_id, ul_ass_id, cert_type, body, mark, rev_no, cert_id, cert_prod_link_status);


FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;06d_list_of_asset_certificate_link_result.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(new File(&quot;${inputfile}&quot;)));

String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data_&quot; + counter, (line));
	counter++;
}

int X = 8;
String x = &quot;Line_data_&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${final_loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${final_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

//Start with the first line of data and get product taxonomy 
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;conso_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_taxo = vars.get(u);
//String val1_taxo = value_taxo.substring(1, value_taxo.length()-1);
ArrayList&lt;String&gt; val2_taxo = Arrays.asList(value_taxo.split(&quot;\t&quot;));

product_type = val2_taxo[0];
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;Empty Value for Product_Type&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;product_type&quot;, prod_type);

asset = val2_taxo[7];
if(asset == null || asset.isEmpty()) {asset_id = &quot;Asset-Not-Found&quot;} else {asset_id = asset.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;asset_id&quot;, asset_id);

ul_asset_id = val2_taxo[8];
if(ul_asset_id == null || ul_asset_id.isEmpty()) {ul_ass_id = &quot;Asset-Not-Found&quot;} else {ul_ass_id = ul_asset_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;ul_asset_id&quot;, ul_ass_id);

certificate_id = val2_taxo[13];
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_id&quot;, cert_id);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Link Asset and Eval to Certificate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}${environment}/certificate/${certificate_id}/assets</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_Taxo_Extract" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;assets\&quot;:  [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;assetId\&quot;: \&quot;${asset_id}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ulAssetId\&quot;: \&quot;${ul_asset_id}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productType\&quot;: \&quot;${product_type}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);
user_value = &apos;${T1_new_employee_number}&apos;;
if(user_value == null || user_value.isEmpty()) {user_val = &quot;&quot;} else {user_val = user_value.replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;).trim()};
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\&quot;+user_val+&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;jsonData&quot;, result.toString());</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Error JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Error</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.error</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Asset_Code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Asset_Certificate_Result in CSV file" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;conso_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));

prod_type = val2_asset_taxo[0];
if(prod_type == null || prod_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = prod_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ass_owner = val2_asset_taxo[1];
if(ass_owner == null || ass_owner.isEmpty()) {asset_owner = &quot;&quot;} else {asset_owner = ass_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ref_no = val2_asset_taxo[2];
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
family_series = val2_asset_taxo[3];
if(family_series == null || family_series.isEmpty()) {series = &quot;&quot;} else {series = family_series.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
model_no = val2_asset_taxo[4];
if(model_no == null || model_no.isEmpty()) {model = &quot;&quot;} else {model = model_no.replace(&quot;\&quot;&quot;, &quot;&quot;)};
create_date = val2_asset_taxo[5];
if(create_date == null || create_date.isEmpty()) {creation_date = &quot;&quot;} else {creation_date = create_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_name = val2_asset_taxo[14];
if(certificate_name == null || certificate_name.isEmpty()) {cert_name = &quot;&quot;} else {cert_name = certificate_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
asset = val2_asset_taxo[7];
if(asset == null || asset.isEmpty()) {asset_id = &quot;Asset-Not-Found&quot;} else {asset_id = asset.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
ul_asset_id = val2_asset_taxo[8];
if(ul_asset_id == null || ul_asset_id.isEmpty()) {ul_ass_id = &quot;Asset-Not-Found&quot;} else {ul_ass_id = ul_asset_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
//assessment = val2_asset_taxo[9];
//if(assessment == null || assessment.isEmpty()) {assessment_id = &quot;Assessment-Not-Found&quot;} else {assessment_id = assessment.trim().replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_type = val2_asset_taxo[9];
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = val2_asset_taxo[10];
if(certificate_body == &quot;Empty-Value-For-Cert-Body&quot; || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark = val2_asset_taxo[11];
if(certificate_mark == &quot;Empty-Value-For-Mark&quot; || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
rev_number = val2_asset_taxo[12];
if(rev_number == &quot;Empty-Value-For-Cert-Rev-No&quot; || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_id = val2_asset_taxo[13];
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

// Get the variable(s) from the JMeter script
error_msg = vars.get(&quot;T1_Asset_Error&quot;);
log.info(&quot;error_msg:&quot;+ error_msg);
message = vars.get(&quot;T1_Asset_Message&quot;);
log.info(&quot;message:&quot;+ message);
code = vars.get(&quot;T1_Asset_Code&quot;)
if (code == &apos;200&apos;){
	if (error_msg== &quot;[]&quot; || error_msg[0].isEmpty()) {
		cert_prod_link_status = message.toString();
	} else {
		cert_prod_link_status = error_msg.toString();
	}
} else {
	cert_prod_link_status = message.toString();
}

String[] params = Arrays.asList(prod_type, asset_owner, ref, series, model, creation_date, cert_name, asset_id, ul_ass_id, cert_type, body, mark, rev_no, cert_id, cert_prod_link_status);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;06d_list_of_asset_certificate_link_result.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="07.Generate Cert-Party-Link with New cert" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cert-Party-Link list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate ID&quot;;
String party_account_no = &quot;Account Number&quot;;
String party_site_no = &quot;Party Site Number&quot;;
String party_relation_type = &quot;Relationship Type&quot;;
String new_cert_no = &quot;Certificate Name&quot;;


String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_id, party_account_no, party_site_no, party_relation_type, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;07_list_of_parties.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Parties" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;01c_list_of_parties.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Party_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Party_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Certificate_id" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;03_list_of_certificate_id.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Cert_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Cert_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;cert_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - New Party update" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
///Start with the first line of data and get asset data
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Party_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_asset_taxo = value_asset_taxo.substring(1, value_asset_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));
log.info(&quot;val2_asset_taxo before:&quot; + val2_asset_taxo.toString());

certificate_type = val2_asset_taxo[0];
if(certificate_type == null || certificate_type.isEmpty()) {link_cert_type = &quot;&quot;} else {link_cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = val2_asset_taxo[1];
if(certificate_body == null || certificate_body.isEmpty()) {link_body = &quot;&quot;} else {link_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark = val2_asset_taxo[2];
if(certificate_mark == null || certificate_mark.isEmpty()) {link_mark = &quot;&quot;} else {link_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_no = val2_asset_taxo[3];
if(certificate_no == null || certificate_no.isEmpty()) {link_cert_name = &quot;&quot;} else {link_cert_name = certificate_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_asset_taxo[5];
if(certificate_owner == null || certificate_owner.isEmpty()) {link_cert_owner = &quot;&quot;} else {link_cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
party_acc_no = val2_asset_taxo[6];
if(party_acc_no == null || party_acc_no.isEmpty()) {link_acc_no = &quot;&quot;} else {link_acc_no = party_acc_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
party_site_no = val2_asset_taxo[7];
if(party_site_no == null || party_site_no.isEmpty()) {link_party_site_no = &quot;&quot;} else {link_party_site_no = party_site_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
party_rel_typ = val2_asset_taxo[8];
if(party_rel_typ == null || party_rel_typ.isEmpty()) {link_party_rel_typ = &quot;&quot;} else {link_party_rel_typ = party_rel_typ.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

for (int a=0; a&lt;${cert_loop_count}; a++) {
	int V = a+1;
	String v = &quot;Cert_Line_data&quot;;
	String w = new Integer (V).toString();	
	String x = v+w;
	String value_cert_taxo = vars.get(x);
	ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));
	log.info(&quot;val2_cert_taxo before:&quot; + val2_cert_taxo.toString());
	certificate_type = val2_cert_taxo[0];
	if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_body = val2_cert_taxo[1];
	if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_mark = val2_cert_taxo[2];
	if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_number = val2_cert_taxo[3];
	if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	rev_number = val2_cert_taxo[4];
	if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_owner = val2_cert_taxo[5];
	log.info(&quot;certificate_ownere:&quot; + val2_cert_taxo[5].toString());
	if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	
	if ((link_cert_type == cert_type) &amp; (link_cert_name == cert_no) &amp; (link_cert_owner == cert_owner)) {
		new_certificate_number = val2_cert_taxo[7];
		if(new_certificate_number == null || new_certificate_number.isEmpty()) {cert_no_updated = &quot;&quot;} else {cert_no_updated = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_id = val2_cert_taxo[6];
		if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	 }   
	 
}

String[] params = Arrays.asList(link_cert_type, link_body, link_mark, link_cert_name, rev_no, cert_owner, cert_id, link_acc_no, link_party_site_no, link_party_rel_typ, cert_no_updated);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;07_list_of_parties.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="08.Parties Linking in Bulk" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="TestPlan.comments">If ${cert_loop_count} != ${asset_loop_count} --&gt; you will see JSR223 Sampler failure with code 500 and that is normal.</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;07_list_of_parties.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Cert_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Cert_Line_data_&quot; + counter, (line));
	counter++;
}
vars.put(&quot;cert_loop_count&quot;,Integer.toString(counter-1));
//log.info(&quot;cert_loop_count:&quot; + Integer.toString(counter-1));
br.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;${inputfile}&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data&quot; + counter, (line));
	counter++;
}
br.close();

int X = 8;
String x = &quot;Line_data&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certificate_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String old_cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate_ID&quot;;
String party_account_no = &quot;Account Number&quot;;
String party_site_no = &quot;Party Site Number&quot;;
String party_relation_type = &quot;Relationship Type&quot;;
String new_cert_no = &quot;New-Certificate Name&quot;;
String cert_party_link_status = &quot;Party_Linkage&quot;;


String[] params = Arrays.asList(cert_type, body, mark, old_cert_no, rev_no, owner, cert_id, party_account_no, party_site_no, party_relation_type, new_cert_no, cert_party_link_status);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;08_list_of_cert_parties_status.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_2" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
          <stringProp name="TestPlan.comments">1</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_3" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${cert_loop_count}</stringProp>
            <stringProp name="TestPlan.comments">${cert_loop_count}</stringProp>
          </LoopController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

//Start with the first line of data and get certificate taxonomy only
int S = ${__jm__Loop Controller_3__idx}+1;
String s = &quot;Cert_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));

vars.put(&quot;Certificate_Id_&quot; + t,  val2_cert_taxo[6]);
vars.put(&quot;Party_Account_No_&quot; + t,  val2_cert_taxo[7]);
vars.put(&quot;Party_Site_No_&quot; + t,  val2_cert_taxo[8]);
vars.put(&quot;Party_Relationship_Type_&quot; + t,  val2_cert_taxo[9]);


//vars.put(&quot;User&quot;, val2_cert_taxo[7]);</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Parties to certificate In Bulk" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Environment_IP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">InformationPlatformServices/api/${version}/certificates/addParties</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">qa.informationplatform.ul.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_add_bulk_parties" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.json.JSONObject;
import org.json.JSONArray;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificates\&quot; : [&quot;);
result.append(&apos;\n&apos;);

int i = 1;
while (i &lt; ${cert_loop_count})
//while (i &lt; 5)
{
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String s = &quot;Certificate_Id_&quot;;
	String t = new Integer (i).toString();	
	String u = s+t;
	String value_cert_id = vars.get(u);
	result.append(&quot;\&quot;certificateId\&quot; : \&quot;${value_cert_id}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;parties\&quot; : {&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;add\&quot; : [&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String a = &quot;Party_Account_No_&quot;;
	String  b = a+t;
	String value_party_acc_no = vars.get(b);
	result.append(&quot;\&quot;accountNumber\&quot; : \&quot;${value_party_acc_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String c = &quot;Party_Site_No_&quot;;
	String  d = c+t;
	String value_party_site_no = vars.get(d);
	result.append(&quot;\&quot;partySiteNumber\&quot; : \&quot;${value_party_site_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String e = &quot;Party_Relationship_Type_&quot;;
	String  f = e+t;
	String value_party_relationship_type = vars.get(f);
	result.append(&quot;\&quot;relationshipType\&quot; : \&quot;${value_party_relationship_type}\&quot;&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;],&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;remove\&quot; : [&quot;);
	result.append(&quot;]&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;},&quot;);
	result.append(&apos;\n&apos;);
	i++;
}
while (i == ${cert_loop_count})
{
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String s = &quot;Certificate_Id_&quot;;
	String t = new Integer (i).toString();	
	String u = s+t;
	String value_cert_id = vars.get(u);
	result.append(&quot;\&quot;certificateId\&quot; : \&quot;${value_cert_id}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;parties\&quot; : {&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;add\&quot; : [&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String a = &quot;Party_Account_No_&quot;;
	String  b = a+t;
	String value_party_acc_no = vars.get(b);
	result.append(&quot;\&quot;accountNumber\&quot; : \&quot;${value_party_acc_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String c = &quot;Party_Site_No_&quot;;
	String  d = c+t;
	String value_party_site_no = vars.get(d);
	result.append(&quot;\&quot;partySiteNumber\&quot; : \&quot;${value_party_site_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String e = &quot;Party_Relationship_Type_&quot;;
	String  f = e+t;
	String value_party_relationship_type = vars.get(f);
	result.append(&quot;\&quot;relationshipType\&quot; : \&quot;${value_party_relationship_type}\&quot;&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;],&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;remove\&quot; : [&quot;);
	result.append(&quot;]&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	i++;
}
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);	
user_value = &apos;${T1_new_employee_number}&apos;;
if(user_value == null || user_value.isEmpty()) {user_val = &quot;&quot;} else {user_val = user_value.replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;).trim()};
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\&quot;+user_val+&quot;\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);


vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Party_Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Code_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Party_Status JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Party_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Party_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Parties from certificate In Bulk" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Environment_IP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">InformationPlatformServices/api/${version}/certificates/addParties</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">qa.informationplatform.ul.com</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_add_bulk_parties" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.json.JSONObject;
import org.json.JSONArray;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificates\&quot; : [&quot;);
result.append(&apos;\n&apos;);

int i = 1;
while (i &lt; ${cert_loop_count})
{
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String s = &quot;Certificate_Id_&quot;;
	String t = new Integer (i).toString();	
	String u = s+t;
	String value_cert_id = vars.get(u);
	result.append(&quot;\&quot;certificateId\&quot; : \&quot;${value_cert_id}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;parties\&quot; : {&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;remove\&quot; : [&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String a = &quot;Party_Account_No_&quot;;
	String  b = a+t;
	String value_party_acc_no = vars.get(b);
	result.append(&quot;\&quot;accountNumber\&quot; : \&quot;${value_party_acc_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String c = &quot;Party_Site_No_&quot;;
	String  d = c+t;
	String value_party_site_no = vars.get(d);
	result.append(&quot;\&quot;partySiteNumber\&quot; : \&quot;${value_party_site_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String e = &quot;Party_Relationship_Type_&quot;;
	String  f = e+t;
	String value_party_relationship_type = vars.get(f);
	result.append(&quot;\&quot;relationshipType\&quot; : \&quot;${value_party_relationship_type}\&quot;&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;],&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;add\&quot; : [&quot;);
	result.append(&quot;]&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;},&quot;);
	result.append(&apos;\n&apos;);
	i++;
}
while (i == ${cert_loop_count})
{
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String s = &quot;Certificate_Id_&quot;;
	String t = new Integer (i).toString();	
	String u = s+t;
	String value_cert_id = vars.get(u);
	result.append(&quot;\&quot;certificateId\&quot; : \&quot;${value_cert_id}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;parties\&quot; : {&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;remove\&quot; : [&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	String a = &quot;Party_Account_No_&quot;;
	String  b = a+t;
	String value_party_acc_no = vars.get(b);
	result.append(&quot;\&quot;accountNumber\&quot; : \&quot;${value_party_acc_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String c = &quot;Party_Site_No_&quot;;
	String  d = c+t;
	String value_party_site_no = vars.get(d);
	result.append(&quot;\&quot;partySiteNumber\&quot; : \&quot;${value_party_site_no}\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	String e = &quot;Party_Relationship_Type_&quot;;
	String  f = e+t;
	String value_party_relationship_type = vars.get(f);
	result.append(&quot;\&quot;relationshipType\&quot; : \&quot;${value_party_relationship_type}\&quot;&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;],&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;add\&quot; : [&quot;);
	result.append(&quot;]&quot;);
	result.append(&apos;\n&apos;);	
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
	result.append(&apos;\n&apos;);
	i++;
}
result.append(&quot;],&quot;);
result.append(&apos;\n&apos;);	
result.append(&quot;\&quot;user\&quot; : \&quot;Global\\\\\\\50696\&quot;&quot;);
//result.append(&quot;\&quot;user\&quot; : \&quot;${__escapeOroRegexpChars(${T1_Certificate_User})}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);


vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Party_Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Code_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Party_Status JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Party_Status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Party_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_4" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${cert_loop_count}</stringProp>
          </LoopController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Store Certificate-id in CSV file" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller_4__idx}+1;
String s = &quot;Cert_Line_data_&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));

log.info(&quot;val2_cert_taxo:&quot; + val2_cert_taxo);

String cert_type = &quot;Certificate Type&quot;;
String issue_body = &quot;Issuing Body&quot;;
String cert_mark = &quot;Mark&quot;;
String old_cert_no = &quot;Old Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String cert_owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Cerificate-ID&quot;;
String acc_no = &quot;Account Number&quot;;
String partysite_no = &quot;PartySite Number&quot;;
String relation_type = &quot;Relationship Type &quot;;
String new_cert_no = &quot;New Certificate Name&quot;;
String cert_party_link_status = &quot;Party_Linkage&quot;;


certificate_type = val2_cert_taxo[0];
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
cert_issue_body = val2_cert_taxo[1];
if(cert_issue_body == null || cert_issue_body.isEmpty()) {issue_body = &quot;&quot;} else {issue_body = cert_issue_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
mark = val2_cert_taxo[2];
if(mark == null || mark.isEmpty()) {cert_mark = &quot;&quot;} else {cert_mark = mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
old_certificate_number = val2_cert_taxo[3];
if(old_certificate_number == null || old_certificate_number.isEmpty()) {old_cert_no = &quot;&quot;} else {old_cert_no = old_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
revision_number = val2_cert_taxo[4];
if(revision_number == null || revision_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = revision_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_cert_taxo[5];
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_id = val2_cert_taxo[6];
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
acc_number = val2_cert_taxo[7];
if(acc_number == null || acc_number.isEmpty()) {acc_no = &quot;&quot;} else {acc_no = acc_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
party_number = val2_cert_taxo[8];
if(party_number == null || party_number.isEmpty()) {partysite_no = &quot;&quot;} else {partysite_no = party_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
rel_type = val2_cert_taxo[9];
if(rel_type == null || rel_type.isEmpty()) {relation_type = &quot;&quot;} else {relation_type = rel_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
new_certificate_number = val2_cert_taxo[10];
if(new_certificate_number == null || new_certificate_number.isEmpty()) {new_cert_no = &quot;&quot;} else {new_cert_no = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

// Get Jmeter Variable

certificate_party_code = vars.get(&quot;T1_Code_Status&quot;);
certificate_party_status = vars.get(&quot;T1_Party_Status&quot;);
if(certificate_party_code == &apos;200&apos; &amp;&amp; certificate_party_status == &apos;OK&apos;) {cert_party_link_status = &quot;Pass&quot;} else {cert_party_link_status = &quot;Fail&quot;};

String[] params = Arrays.asList(cert_type, issue_body, cert_mark, old_cert_no, rev_no, cert_owner, cert_id, acc_no, partysite_no, relation_type, new_cert_no, cert_party_link_status);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;08_list_of_cert_parties_status.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="09.Generate Cert-Decision with New cert" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cert-Decision list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

String first_line = &quot;Column1\tColumn2\tColumn3\tColumn4\tColumn5\tColumn6\tColumn7\tColumn8\tColumn9\tColumn10\tColumn11\tColumn12\tColumn13\tColumn14\tColumn15&quot;;
String [] params1 = Arrays.asList(first_line);

String second_line = &quot;dataParamName\tcertificateType\tissuingBody\tmark\tcertificateName\trevisionNumber\townerReference\t \tissueDate\twithdrawalDate\twithdrawReason\twithdrawComment\tissueDate\t \t&quot;;
String [] params2 = Arrays.asList(second_line);

String third_line = &quot;dataType\ttext\ttext\ttext\ttext\ttext\ttext\t \tdate\tdate\ttext\ttext\tdate\t \t\nuom\tN/A\tN/A\tN/A\tN/A\tN/A\tN/A\t \tN/A\tN/A\tN/A\tN/A\tN/A\tN/A\tN/A&quot;;
String [] params3 = Arrays.asList(third_line);

String forth_line = &quot;name\tCertificate Type\tIssuing Body\tMark\tCertificate Name\tRevision Number\tOwner Reference\t \tIssue Date\tWithdrawal Date\tWithdraw Reason\tWithdraw Comment\tIssue Date\t \t\ndisplaySeq\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\t13\t14\ndefaultValue\nrange(L, H, Inc)\nscale&quot;;
String [] params4 = Arrays.asList(forth_line);

String fifth_line = &quot;listOfValues\tUS Safety Scheme\tUL LLC\tListed;Classified;Recognized;Enhanced;Unlisted\t \t \t \t \t \t \tWB Out of Business;WC1 Pricing;WC2 Service;WF Failure to Pay;WJ Noncomp Agreement;WP Transfer;WR Rec Maint;WS Noncomp Std\ndataGroup\ndisplay&quot;;
String [] params5 = Arrays.asList(fifth_line);

String sixth_line = &quot;cardinality\t1..1\t1..1\t1..1\t1..1\t0..1\t1..1\t1..1\t1..1	\t0..1\t0..1\t	0..1\t1..1&quot;;
String [] params6 = Arrays.asList(sixth_line);

String display_name = &quot;displayName&quot;;
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_status = &quot;Certificate Status&quot;;
String iss_date = &quot;Issue-Date&quot;;
String with_date = &quot;Withdrawn-Date&quot;;
String with_reason = &quot;Why is the Certification being Withdrawn?&quot;;
String with_comments = &quot;Withdrawal Comments&quot;;
String new_iss_date = &quot;New-Issue-Date&quot;;
String new_cert_id = &quot;New-Certificate ID&quot;;
String new_cert_no = &quot;New-Certificate Name&quot;;


String[] params = Arrays.asList(display_name, cert_type, body, mark, cert_no, rev_no, owner, cert_status, iss_date, with_date, with_reason, with_comments, new_iss_date, new_cert_id, new_cert_no);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;09_list_of_decisions.tsv&quot;, true);
writeLine(fileWriter, params1, SEPARATOR);
writeLine(fileWriter, params2, SEPARATOR);
writeLine(fileWriter, params3, SEPARATOR);
writeLine(fileWriter, params4, SEPARATOR);
writeLine(fileWriter, params5, SEPARATOR);
writeLine(fileWriter, params6, SEPARATOR);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Decisions" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;01d_list_of_decisions.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Decisions_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Decisions_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;decisions_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS List_of_Certificate_id" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;03_list_of_certificate_id.tsv&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
   	vars.put(&quot;Cert_Line&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Cert_Line_data&quot; + counter, (line));
	counter++;
}
//counter-1 indicates we start asset creation from line number 1 in the tsv file  
vars.put(&quot;cert_loop_count&quot;,Integer.toString(counter-1));
br.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${cert_loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${cert_loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - New Decisions update" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
///Start with the first line of data and get asset data
int S = ${__jm__Loop Controller__idx}+1;
String s = &quot;Decisions_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_asset_taxo = vars.get(u);
//String val1_asset_taxo = value_asset_taxo.substring(1, value_asset_taxo.length()-1);
ArrayList&lt;String&gt; val2_asset_taxo = Arrays.asList(value_asset_taxo.split(&quot;\t&quot;));
log.info(&quot;val2_asset_taxo before:&quot; + val2_asset_taxo.toString());

String display_name = &quot;&quot;;
certificate_type = val2_asset_taxo[0];
if(certificate_type == null || certificate_type.isEmpty()) {link_cert_type = &quot;&quot;} else {link_cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_body = val2_asset_taxo[1];
if(certificate_body == null || certificate_body.isEmpty()) {link_body = &quot;&quot;} else {link_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_mark = val2_asset_taxo[2];
if(certificate_mark == null || certificate_mark.isEmpty()) {link_mark = &quot;&quot;} else {link_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_no = val2_asset_taxo[3];
if(certificate_no == null || certificate_no.isEmpty()) {link_cert_name = &quot;&quot;} else {link_cert_name = certificate_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
revision_no = val2_asset_taxo[4];
if(revision_no == null || revision_no.isEmpty()) {link_rev_no = &quot;&quot;} else {link_rev_no = revision_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_asset_taxo[5];
if(certificate_owner == null || certificate_owner.isEmpty()) {link_cert_owner = &quot;&quot;} else {link_cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_status = val2_asset_taxo[6];
if(certificate_status == null || certificate_status.isEmpty()) {link_cert_status = &quot;&quot;} else {link_cert_status = certificate_status.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_issue_date = val2_asset_taxo[7];
if(certificate_issue_date == null || certificate_issue_date.isEmpty()) {link_cert_iss_date = &quot;&quot;} else {link_cert_iss_date = certificate_issue_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_withdrawn_date = val2_asset_taxo[8];
if(certificate_withdrawn_date == null || certificate_withdrawn_date.isEmpty()) {link_cert_withdraw_date = &quot;&quot;} else {link_cert_withdraw_date = certificate_withdrawn_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_withdrawn_reason = val2_asset_taxo[9];
if(certificate_withdrawn_reason == null || certificate_withdrawn_reason.isEmpty()) {link_cert_withdraw_reason = &quot;&quot;} else {link_cert_withdraw_reason = certificate_withdrawn_reason.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_withdrawn_comments = val2_asset_taxo[10];
if(certificate_withdrawn_comments == null || certificate_withdrawn_comments.isEmpty()) {link_cert_withdraw_comments = &quot;&quot;} else {link_cert_withdraw_comments = certificate_withdrawn_comments.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_new_issue_date = val2_asset_taxo[11];
if(certificate_new_issue_date == null || certificate_new_issue_date.isEmpty()) {link_cert_new_iss_date = &quot;&quot;} else {link_cert_new_iss_date = certificate_new_issue_date.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};

for (int a=0; a&lt;${cert_loop_count}; a++) {
	int V = a+1;
	String v = &quot;Cert_Line_data&quot;;
	String w = new Integer (V).toString();	
	String x = v+w;
	String value_cert_taxo = vars.get(x);
	ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));
	log.info(&quot;val2_cert_taxo before:&quot; + val2_cert_taxo.toString());
	certificate_type = val2_cert_taxo[0];
	if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_body = val2_cert_taxo[1];
	if(certificate_body == null || certificate_body.isEmpty()) {body = &quot;&quot;} else {body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_mark = val2_cert_taxo[2];
	if(certificate_mark == null || certificate_mark.isEmpty()) {mark = &quot;&quot;} else {mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_number = val2_cert_taxo[3];
	if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	rev_number = val2_cert_taxo[4];
	if(rev_number == null || rev_number.isEmpty()) {rev_no = &quot;&quot;} else {rev_no = rev_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	certificate_owner = val2_cert_taxo[5];
	if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	
	if ((link_cert_type == cert_type) &amp; (link_cert_name == cert_no) &amp; (link_cert_owner == cert_owner)) {
		new_certificate_number = val2_cert_taxo[7];
		if(new_certificate_number == null || new_certificate_number.isEmpty()) {cert_no_updated = &quot;&quot;} else {cert_no_updated = new_certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
		certificate_id = val2_cert_taxo[6];
		if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
	 }   
	 
}

String[] params = Arrays.asList(display_name, link_cert_type, link_body, link_mark, link_cert_name, link_rev_no, link_cert_owner, link_cert_status, link_cert_iss_date, link_cert_withdraw_date, link_cert_withdraw_reason, link_cert_withdraw_comments, link_cert_new_iss_date, cert_id, cert_no_updated);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;09_list_of_decisions.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="10.Add Decisions to Certificate" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Certificate_Decisioning" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;09_list_of_decisions.tsv&quot;));
String line;
int counter = 0;
int line_counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;decision_Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;decision_Line_data&quot; + counter, (line));
	ArrayList&lt;String&gt; val2_cert_taxo = java.util.Arrays.asList(line.split(&quot;\t&quot;));
	col1_cell_value = val2_cert_taxo[0];
	if (col1_cell_value == &apos;displayName&apos;)
		{
		log.info(&quot;col1_cell_value:&quot; + col1_cell_value.toString());
		log.info(&quot;counter_value:&quot; + counter);
		line_counter = counter;
		}
	counter++;	
}

//counter-4 indicates we start asset creation from line number 4 in the csv file as this will avoid first four line with &quot;uom, dataParamName, seq, name&quot;  
//log.info(&quot;line_counter_value:&quot; + line_counter);

vars.put(&quot;line_counter&quot;,Integer.toString(line_counter));
log.info(&quot;line_counter:&quot; + line_counter);
vars.put(&quot;loop_count&quot;,Integer.toString(counter-line_counter-1));
br.close();</stringProp>
          <stringProp name="TestPlan.comments">If ${cert_loop_count} != ${asset_loop_count} --&gt; you will see JSR223 Sampler failure with code 500 and that is normal.</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_Read-Cert-Report" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

BufferedReader br = new BufferedReader(new FileReader(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+&quot;${inputfile}&quot;));
String line;
int counter = 0;
while ((line = br.readLine()) != null) {
	vars.put(&quot;Line_&quot; + counter, (java.util.Arrays.toString(line.split(&quot;\t&quot;))));
	vars.put(&quot;Line_data&quot; + counter, (line));
	counter++;
}
br.close();

int X = 8;
String x = &quot;Line_data&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_taxo_owner = vars.get(z);
ArrayList&lt;String&gt; val2_taxo_owner = Arrays.asList(value_taxo_owner.split(&quot;\t&quot;));

new_owner_ref = val2_taxo_owner[1];
if(new_owner_ref == null || new_owner_ref.isEmpty()) {new_owner = &quot;&quot;} else {new_owner = new_owner_ref.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner&quot;, new_owner);

String y1 = new Integer (X+1).toString();	
String z1 = x+y1;
String value_taxo_owner_acc = vars.get(z1);
ArrayList&lt;String&gt; val2_taxo_owner_acc = Arrays.asList(value_taxo_owner_acc.split(&quot;\t&quot;));

new_owner_acc = val2_taxo_owner_acc[1];
if(new_owner_acc == null || new_owner_acc.isEmpty()) {new_owner_account = &quot;&quot;} else {new_owner_account = new_owner_acc.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_owner_account&quot;, new_owner_account);

String y2 = new Integer (X+2).toString();	
String z2 = x+y2;
String value_taxo_applicant = vars.get(z2);
ArrayList&lt;String&gt; val2_taxo_applicant = Arrays.asList(value_taxo_applicant.split(&quot;\t&quot;));

new_applicant_file = val2_taxo_applicant[1];
if(new_applicant_file == null || new_applicant_file.isEmpty()) {new_applicant = &quot;&quot;} else {new_applicant = new_applicant_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_applicant&quot;, new_applicant);

String y3 = new Integer (X+3).toString();	
String z3 = x+y3;
String value_taxo_listee = vars.get(z3);
ArrayList&lt;String&gt; val2_taxo_listee = Arrays.asList(value_taxo_listee.split(&quot;\t&quot;));

new_listee_file = val2_taxo_listee[1];
if(new_listee_file == null || new_listee_file.isEmpty()) {new_listee = &quot;&quot;} else {new_listee = new_listee_file.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_listee&quot;, new_listee);

String y4 = new Integer (X+4).toString();	
String z4 = x+y4;
String value_taxo_emp_name = vars.get(z4);
ArrayList&lt;String&gt; val2_taxo_emp_name = Arrays.asList(value_taxo_emp_name.split(&quot;\t&quot;));

new_emp_name = val2_taxo_emp_name[1];
if(new_emp_name == null || new_emp_name.isEmpty()) {new_employee_name = &quot;&quot;} else {new_employee_name = new_emp_name.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_name&quot;, new_employee_name);

String y5 = new Integer (X+5).toString();	
String z5 = x+y5;
String value_taxo_emp_no = vars.get(z5);
ArrayList&lt;String&gt; val2_taxo_emp_no = Arrays.asList(value_taxo_emp_no.split(&quot;\t&quot;));

new_emp_no = val2_taxo_emp_no[1];
if(new_emp_no == null || new_emp_no.isEmpty()) {new_employee_number = &quot;&quot;} else {new_employee_number = new_emp_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_employee_number&quot;, new_employee_number);

String y6 = new Integer (X+6).toString();	
String z6 = x+y6;
String value_taxo_project_no = vars.get(z6);
ArrayList&lt;String&gt; val2_taxo_project_no = Arrays.asList(value_taxo_project_no.split(&quot;\t&quot;));

new_project_no = val2_taxo_project_no[1];
if(new_project_no == null || new_project_no.isEmpty()) {new_project_number = &quot;&quot;} else {new_project_number = new_project_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_new_project_number&quot;, new_project_number);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Certified_Certificate_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      //log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate-ID&quot;;
String cert_certify_status = &quot;Certify Status&quot;;
String cert_certify_message = &quot;Certify Error Message&quot;;

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_id, cert_certify_status, cert_certify_message);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;10_list_of_decisions_status.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${loop_count}</stringProp>
          <stringProp name="TestPlan.comments">${loop_count}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

//Start with the first line of data and get certificate taxonomy only
int S = ${__jm__Loop Controller__idx}+1+${line_counter};
String s = &quot;decision_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));
log.info(&quot;val2_cert_taxo:&quot; + val2_cert_taxo);

vars.put(&quot;Certificate_status&quot;,  val2_cert_taxo[7]);
vars.put(&quot;Withdrawal_Date&quot;,  val2_cert_taxo[9]);
vars.put(&quot;Withdraw_Reason&quot;,  val2_cert_taxo[10]);
vars.put(&quot;Withdraw_Comments&quot;,  val2_cert_taxo[11]);
vars.put(&quot;Issue_Date&quot;,  val2_cert_taxo[12]);
vars.put(&quot;T1_Certificate_ID&quot;,  val2_cert_taxo[13]);</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Decisions to certificate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Environment_IP}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">InformationPlatformServices/api/${version}/assets/certificate/${T1_Certificate_ID}/decisions?skipValidation=false</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_model_creation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificate\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
SimpleDateFormat csv_issue_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
try{
	Date taxo_issue_parsedDate = csv_issue_date.parse(vars.get(&quot;Issue_Date&quot;));
	SimpleDateFormat taxo_issue_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	result.append(&quot;\&quot;issueDate\&quot; : \&quot;&quot;+taxo_issue_date.format(taxo_issue_parsedDate)+&quot;\&quot;,&quot;);
}
catch (ParseException parseex)
		{
			result.append(&quot;\&quot;issueDate\&quot; : \&quot;${Issue_Date}\&quot;,&quot;);
		}
//result.append(&quot;\&quot;issueDate\&quot; : \&quot;&quot;+taxo_issue_date.format(taxo_issue_parsedDate)+&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;revisionNumber\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certify\&quot; : \&quot;Y\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;revisionDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;expiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
SimpleDateFormat csv_withdraw_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
try{
	Date taxo_withdraw_parsedDate = csv_withdraw_date.parse(vars.get(&quot;Withdrawal_Date&quot;));
	SimpleDateFormat taxo_withdraw_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
	result.append(&quot;\&quot;withdrawalDate\&quot; : \&quot;&quot;+taxo_withdraw_date.format(taxo_withdraw_parsedDate)+&quot;\&quot;,&quot;);
}
catch (ParseException parseex)
		{
			result.append(&quot;\&quot;withdrawalDate\&quot; : \&quot;${Withdrawal_Date}\&quot;,&quot;);
		}
//result.append(&quot;\&quot;withdrawalDate\&quot; : \&quot;${Withdrawal_Date}\&quot;,&quot;);
result.append(&apos;\n&apos;);
user_value = &apos;${T1_new_employee_number}&apos;;
if(user_value == null || user_value.isEmpty()) {user_val = &quot;&quot;} else {user_val = user_value.replace(&quot;\&quot;&quot;, &quot;&quot;).replace(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;).trim()};
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\&quot;+user_val+&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
///////////////projectDetails block starts////////////////////////////////////////////////////
result.append(&quot;\&quot;projectDetails\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_project_number}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;name\&quot; : \&quot;projectNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;],&quot;);
///////////////projectDetails block ends////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;hasQuestions\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;hasRecommendation\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
///////////////hascertify block starts////////////////////////////////////////////////////
result.append(&quot;\&quot;hasCertify\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;relationshipType\&quot; : \&quot;Certify\&quot;,&quot;);
result.append(&apos;\n&apos;);
///////////////hascertify--&gt; Attributes block starts///////////////////////////////////////////
result.append(&quot;\&quot;attributes\&quot; : [&quot;);
result.append(&apos;\n&apos;);

////////////////////////work here///////////////////////////

//Extract &quot;uom&quot; information
int A = 3;
String a = &quot;decision_Line_&quot;;
String b = new Integer (A).toString();	
String c = a+b;
String value_uom = vars.get(c);
//log.info(value_uom);
String val1_uom = value_uom.substring(1, value_uom.length()-2);
//log.info(val1_uom);
ArrayList&lt;String&gt; val2_uom = Arrays.asList(val1_uom.split(&quot;,&quot;));

//Extract &quot;dataParamName&quot; information
int D = 1;
String d = &quot;decision_Line_data&quot;;
String e = new Integer (D).toString();	
String f = d+e;
String value_paramName = vars.get(f);
//log.info(value_paramName);
if(value_paramName == null || value_paramName.isEmpty()) {val1_paramName = value_paramName} else {val1_paramName = value_paramName.split(&quot;\t&quot;)}
ArrayList&lt;String&gt; val2_paramName = Arrays.asList(val1_paramName);

//Extract &quot;seq&quot; information
int G = 5;
String g = &quot;decision_Line_data&quot;;
String h = new Integer (G).toString();	
String i = g+h;
String value_seq = vars.get(i);
//log.info(value_seq);
if(value_seq == null || value_seq.isEmpty()) {val1_seq = value_seq} else {val1_seq = value_seq.split(&quot;\t&quot;)}
ArrayList&lt;String&gt; val2_seq = Arrays.asList(val1_seq);

//Extract &quot;scale&quot; information
int G_scale = 8;
String g_scale = &quot;decision_Line_data&quot;;
String h_scale = new Integer (G_scale).toString();	
String i_scale = g_scale+h_scale;
String value_scale = vars.get(i_scale);
ArrayList&lt;String&gt; val2_scale = Arrays.asList(value_scale.split(&quot;\t&quot;));
int val2_scale_size = val2_scale.size();
//log.info(&quot;val2_scale&quot; + val2_scale);

//Extract &quot;listOfValue&quot; information
int G_LoV = 9;
String g_LoV = &quot;decision_Line_data&quot;;
String h_LoV = new Integer (G_LoV).toString();	
String i_LoV = g_LoV+h_LoV;
String value_LoV = vars.get(i_LoV);
ArrayList&lt;String&gt; val2_LoV = Arrays.asList(value_LoV.split(&quot;\t&quot;));
int val2_LoV_size = val2_LoV.size();
//log.info(&quot;val2_LoV&quot; + val2_LoV);

//Extract &quot;dataGroup&quot; information
int X = 10;
String x = &quot;decision_Line_data&quot;;
String y = new Integer (X).toString();	
String z = x+y;
String value_datagrp = vars.get(z);
ArrayList&lt;String&gt; val2_datagrp = Arrays.asList(value_datagrp.split(&quot;\t&quot;));
int val2_datagrp_size = val2_datagrp.size();
//log.info(&quot;val2_datagrp:&quot; + val2_datagrp);

//Extract &quot;cardinality&quot; information
int G_card = 12;
String g_card = &quot;decision_Line_data&quot;;
String h_card = new Integer (G_card).toString();	
String i_card = g_card+h_card;
String value_card = vars.get(i_card);
ArrayList&lt;String&gt; val2_card = Arrays.asList(value_card.split(&quot;\t&quot;));
int val2_card_size = val2_card.size();
//log.info(&quot;val2_card&quot; + val2_card);

//Extract &quot;name&quot; information 
int J = 4;
String j = &quot;decision_Line_data&quot;;
String k = new Integer (J).toString();	
String l = j+k;
String value_name = vars.get(l);
ArrayList&lt;String&gt; val2_name = Arrays.asList(value_name.split(&quot;\t&quot;));
//log.info(&quot;val2_name&quot; + val2_name);

//Start with the first line of data and get certificate taxonomy only
int S = ${__jm__Loop Controller__idx}+1+${line_counter};
String s = &quot;decision_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
if(value_cert_taxo == null || value_cert_taxo.isEmpty()) {val1_cert_taxo = value_cert_taxo} else {val1_cert_taxo = value_cert_taxo.split(&quot;\t&quot;)}
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(val1_cert_taxo);

int att_array_size = val2_uom.size();
int att_count = 9;
for(att_count; att_count&lt;=att_array_size-4; att_count++) {
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;uom\&quot; : \&quot;&quot;+val2_uom[att_count].trim()+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;dataParamName\&quot; : \&quot;&quot;+val2_paramName[att_count]+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	if((val2_datagrp[att_count].toString().length() &gt; 1) || ((!(val2_datagrp[att_count].toString().length() &gt; 1)) &amp;&amp;(!(val2_LoV[att_count].toString().length() &gt; 1) || (val2_LoV[att_count].toString() == &quot;null&quot;)) &amp;&amp; (!(val2_scale[att_count].toString().length() &gt; 1) || (val2_scale[att_count].toString() == &quot;null&quot;)) &amp;&amp;((val2_card[att_count].toString() != &quot;1..1&quot;)))) {val2_seq_val = &quot;1&quot;}; else {val2_seq_val = &quot;&quot;}; 	 
	result.append(&quot;\&quot;seq\&quot; : \&quot;&quot;+val2_seq_val+&quot;\&quot;,&quot;);			
//	result.append(&quot;\&quot;seq\&quot; : \&quot;&quot;+((val2_seq[att_count] == null) ? &quot;&quot; : val2_seq[att_count].trim())+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	SimpleDateFormat csv_att2_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
	try
		{
			Date att2_parsedDate = csv_att2_date.parse(val2_cert_taxo[att_count].toString().trim());
			SimpleDateFormat json_att2_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
			result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+json_att2_date.format(att2_parsedDate)+&quot;\&quot;&quot;);		
		}
	catch (ParseException parseex)
		{
			result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+val2_cert_taxo[att_count].replace(&quot;\&quot;&quot;, &quot;&quot;)+&quot;\&quot;&quot;);
		}
//	result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+val2_data[att_count].trim().replace(&apos;^&apos;,&apos;,&apos;)+&quot;\&quot;&quot;)
	result.append(&apos;\n&apos;);
	result.append(&quot;},&quot;);
	result.append(&apos;\n&apos;);
}
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;uom\&quot; : \&quot;N/A\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;certifierEmployeeName\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;seq\&quot; : \&quot;1\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_employee_name}\&quot;&quot;);	
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;uom\&quot; : \&quot;N/A\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;dataParamName\&quot; : \&quot;certifierEmployeeNumber\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;seq\&quot; : \&quot;1\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${T1_new_employee_number}\&quot;&quot;);	
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);	
for(att_count; att_count==att_array_size-3; att_count++) {
	result.append(&quot;{&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;uom\&quot; : \&quot;&quot;+val2_uom[att_count].trim()+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	result.append(&quot;\&quot;dataParamName\&quot; : \&quot;&quot;+val2_paramName[att_count]+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	if((val2_datagrp[att_count].toString().length() &gt; 1) || ((!(val2_datagrp[att_count].toString().length() &gt; 1)) &amp;&amp;(!(val2_LoV[att_count].toString().length() &gt; 1) || (val2_LoV[att_count].toString() == &quot;null&quot;)) &amp;&amp; (!(val2_scale[att_count].toString().length() &gt; 1) || (val2_scale[att_count].toString() == &quot;null&quot;)) &amp;&amp;((val2_card[att_count].toString() != &quot;1..1&quot;)))) {val2_seq_val = &quot;1&quot;}; else {val2_seq_val = &quot;&quot;}; 	 
	result.append(&quot;\&quot;seq\&quot; : \&quot;&quot;+val2_seq_val+&quot;\&quot;,&quot;);	
//	result.append(&quot;\&quot;seq\&quot; : \&quot;&quot;+((val2_seq[att_count] == null) ? &quot;&quot; : val2_seq[att_count].trim())+&quot;\&quot;,&quot;);
	result.append(&apos;\n&apos;);
	SimpleDateFormat csv_att2_date =new SimpleDateFormat(&quot;MM/dd/yyyy&quot;, Locale.ENGLISH);
	try
		{
			Date att2_parsedDate = csv_att2_date.parse(val2_cert_taxo[att_count].toString().trim());
			SimpleDateFormat json_att2_date = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
			result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+json_att2_date.format(att2_parsedDate)+&quot;\&quot;&quot;);		
		}
	catch (ParseException parseex)
		{
			result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+val2_cert_taxo[att_count].replace(&quot;\&quot;&quot;, &quot;&quot;)+&quot;\&quot;&quot;);
		}
//	result.append(&quot;\&quot;value\&quot; : \&quot;&quot;+val2_data[att_count].trim().replace(&apos;^&apos;,&apos;,&apos;)+&quot;\&quot;&quot;)
	result.append(&apos;\n&apos;);
	result.append(&quot;}&quot;);
}
////////////////////////work here ends//////////////////////////
///////////////hascertify--&gt; Attributes block ends///////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
///////////////hascertify block ends////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Code JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Code</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..code</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Message JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Store Certificate Decision in TSV file" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
//Start with the first line of data and get document Id only
int S = ${__jm__Loop Controller__idx}+1+${line_counter};
String s = &quot;decision_Line_data&quot;;
String t = new Integer (S).toString();	
String u = s+t;
String value_cert_taxo = vars.get(u);
//String val1_cert_taxo = value_cert_taxo.substring(1, value_cert_taxo.length()-1);
ArrayList&lt;String&gt; val2_cert_taxo = Arrays.asList(value_cert_taxo.split(&quot;\t&quot;));

String cert_type = &quot;Certificate Type&quot;;
String body = &quot;Issuing Body&quot;;
String mark = &quot;Mark&quot;;
String cert_no = &quot;Certificate Name&quot;;
String rev_no = &quot;Revision Number&quot;;
String owner = &quot;Owner Reference&quot;;
String cert_id = &quot;Certificate-ID&quot;;
String cert_certify_status = &quot;Certify Status&quot;;
String cert_certify_message = &quot;Certify Error Message&quot;;

certificate_type = val2_cert_taxo[1];
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;Certificate-Type-Not-Found&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
cert_issue_body = val2_cert_taxo[2];
if(cert_issue_body == null || cert_issue_body.isEmpty()) {body = &quot;Certificate-Body-Not-Found&quot;} else {body = cert_issue_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
cert_mark = val2_cert_taxo[3];
if(cert_mark == null || cert_mark.isEmpty()) {mark = &quot;Certificate-Mark-Not-Found&quot;} else {mark = cert_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_number = val2_cert_taxo[-1];
if(certificate_number == null || certificate_number.isEmpty()) {cert_no = &quot;Certificate-Name-Not-Found&quot;} else {cert_no = certificate_number.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
cert_rev_no = &quot;0&quot;;
if(cert_rev_no == null || cert_rev_no.isEmpty()) {rev_no = &quot;Revision-Number-Not-Found&quot;} else {rev_no = cert_rev_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_owner = val2_cert_taxo[6];
if(certificate_owner == null || certificate_owner.isEmpty()) {owner = &quot;Certificate-Owner-Not-Found&quot;} else {owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};


// Get Jmeter Variable
certificate_id = vars.get(&quot;T1_Certificate_ID&quot;);
if(certificate_id == null || certificate_id.isEmpty()) {cert_id = &quot;Certificate-ID-Not-Found&quot;} else {cert_id = certificate_id.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
certificate_code = vars.get(&quot;T1_Code&quot;);
if(certificate_code == &apos;200&apos;) {cert_certify_status = &quot;Pass&quot;} else {cert_certify_status = &quot;Fail&quot;};

cert_certify_message = vars.get(&quot;T1_Message&quot;);

String[] params = Arrays.asList(cert_type, body, mark, cert_no, rev_no, owner, cert_id, cert_certify_status,cert_certify_message);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+&quot;10_list_of_decisions_status.tsv&quot;, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">true</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
