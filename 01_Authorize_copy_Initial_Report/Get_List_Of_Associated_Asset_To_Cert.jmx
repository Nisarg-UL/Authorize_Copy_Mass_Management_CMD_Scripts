<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Get_List_Of_Associated_Asset_To_Cert">
      <stringProp name="TestPlan.comments">Please change Environment (DEV|QA|TRN|PROD) if you want to execute this test across other environment</stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">PROD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Environment_Path" elementType="Argument">
            <stringProp name="Argument.name">Environment_Path</stringProp>
            <stringProp name="Argument.value">InformationPlatform</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="grant_type" elementType="Argument">
            <stringProp name="Argument.name">grant_type</stringProp>
            <stringProp name="Argument.value">client_credentials</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scope" elementType="Argument">
            <stringProp name="Argument.name">scope</stringProp>
            <stringProp name="Argument.value">User.Read</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_DEV" elementType="Argument">
            <stringProp name="Argument.name">client_id_DEV</stringProp>
            <stringProp name="Argument.value">0bde28b5-3955-44fc-ba93-7bd24888cad4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_DEV" elementType="Argument">
            <stringProp name="Argument.name">client_secret_DEV</stringProp>
            <stringProp name="Argument.value">_1WsFrF-8Jq.7j.E50ampM~YF09-KXP6Om</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_TRN" elementType="Argument">
            <stringProp name="Argument.name">client_id_TRN</stringProp>
            <stringProp name="Argument.value">cb7de529-ffbc-4574-ac0b-5025847ec5a2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_TRN" elementType="Argument">
            <stringProp name="Argument.name">client_secret_TRN</stringProp>
            <stringProp name="Argument.value">NB9Ah.6ZX8OiE3vq?=qgwwKV@7bpRBN@ </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_QA" elementType="Argument">
            <stringProp name="Argument.name">client_id_QA</stringProp>
            <stringProp name="Argument.value">108b1166-1352-4636-8ccd-34ed0611dbc1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_QA" elementType="Argument">
            <stringProp name="Argument.name">client_secret_QA</stringProp>
            <stringProp name="Argument.value">oey3KPPqmN4O4vG_DE.mG.~S~-XmzM4SJi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id_PROD" elementType="Argument">
            <stringProp name="Argument.name">client_id_PROD</stringProp>
            <stringProp name="Argument.value">98da3396-91da-4bf4-8e6c-62ba7a32ba7a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_secret_PROD" elementType="Argument">
            <stringProp name="Argument.name">client_secret_PROD</stringProp>
            <stringProp name="Argument.value">_s~06RK67yvVhc-QgqTfsR0Gwaf5vs~8.U</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_number" elementType="Argument">
            <stringProp name="Argument.name">user_number</stringProp>
            <stringProp name="Argument.value">${__P(user_number,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="owner_ref" elementType="Argument">
            <stringProp name="Argument.name">owner_ref</stringProp>
            <stringProp name="Argument.value">${__P(owner_ref,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="applicant_file" elementType="Argument">
            <stringProp name="Argument.name">applicant_file</stringProp>
            <stringProp name="Argument.value">${__P(applicant_file,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ccn" elementType="Argument">
            <stringProp name="Argument.name">ccn</stringProp>
            <stringProp name="Argument.value">${__P(ccn,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_scheme" elementType="Argument">
            <stringProp name="Argument.name">cert_scheme</stringProp>
            <stringProp name="Argument.value">${__P(cert_scheme,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_body" elementType="Argument">
            <stringProp name="Argument.name">cert_body</stringProp>
            <stringProp name="Argument.value">${__P(cert_body,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_mark" elementType="Argument">
            <stringProp name="Argument.name">cert_mark</stringProp>
            <stringProp name="Argument.value">${__P(cert_mark,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cert_no" elementType="Argument">
            <stringProp name="Argument.name">cert_no</stringProp>
            <stringProp name="Argument.value">${__P(cert_no,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="product_type" elementType="Argument">
            <stringProp name="Argument.name">product_type</stringProp>
            <stringProp name="Argument.value">${__P(product_type,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="operator" elementType="Argument">
            <stringProp name="Argument.name">operator</stringProp>
            <stringProp name="Argument.value">like</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="offset" elementType="Argument">
            <stringProp name="Argument.name">offset</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults-IP(non-PROD)" enabled="false">
        <stringProp name="HTTPSampler.domain">uliotest.azure-api.net</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.path">InformationPlatformServices${environment}</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults-IP(PROD)" enabled="true">
        <stringProp name="HTTPSampler.domain">io.ul.com</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="00.Report_list_of_certificates" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import javax.*;
import java.text.*;
import java.util.*;
import org.apache.jmeter.services.FileServer;

cal_create_date = new Date().format(&apos;yyyyMMdd&apos;);

String user_no = vars.get(&quot;user_number&quot;);

String customers = FileServer.getFileServer().getBaseDir() + File.separator+File.separator+cal_create_date+&quot;_ProjectNo_&quot;+user_no+&quot;_AuthCopyInput.tsv&quot;;

try {

 File file = new File(customers);

 if (file.delete()) {
  System.out.println(file.getName() + &quot; is deleted!&quot;);
 } else {
  System.out.println(&quot;Delete operation has failed!&quot;);
 }
} catch (Exception e) {
  e.printStackTrace();
}

// Open File(s)
f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+File.separator+File.separator+cal_create_date+&quot;_ProjectNo_&quot;+user_no+&quot;_AuthCopyInput.tsv&quot;, true); 
p = new PrintStream(f); 

// Close File(s)
p.close();f.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="00.Get Cert Thread Group" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Cert_Asset_ID list with header" enabled="true">
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import java.text.*;
import java.util.*;

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
//      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}
String first_line = &quot;#Version#\n\t################################&quot;;
String [] params1 = Arrays.asList(first_line);

String second_line = &quot;\t#To Remove Certificates from being &apos;Copied&apos; delete the related Row from the Excel\n\t################################&quot;;
String [] params2 = Arrays.asList(second_line);

String third_line = &quot;\t#Enter New Owner PSN, New Owner Account, New Applicant File Number and New Listee File Number in Column B \n\t#The New Party Site Number and New File Numbers will apply to ALL Certificates listed in the Excel \n\t#Required to Enter Employee Number and Project/SR Number in Column B\n\t################################&quot;;
String [] params3 = Arrays.asList(third_line);

String forth_line = &quot;New Owner PSN\nNew Owner Account\nNew Applicant-File-No\nNew Listee File Number\nEmployee Name\nEmployee Number\nProject Number\n################################\t################################&quot;;
String [] params4 = Arrays.asList(forth_line);

String fifth_line = &quot;\t#Enter New Volume/Section/Date Fields for all Rows (cannot be BLANK) \n\t#The below Columns can be sorted as needed for adding the New Information easier\n################################\t################################&quot;;
String [] params5 = Arrays.asList(fifth_line);

String cert_id = &quot;Cert-ID&quot;;
String cert_type = &quot;Cert-Scheme&quot;;
String cert_num = &quot;Cert-Name&quot;;
String cert_rev_num = &quot;Revision-Number&quot;;
String cert_owner = &quot;Owner-Ref&quot;;
String cert_status = &quot;Cert-Status&quot;;
String cert_applicant_file = &quot;Applicant-File-No&quot;;
String cert_vol = &quot;Volume&quot;;
String cert_sec = &quot;Section&quot;;
String cert_issue_date = &quot;Issue Date&quot;;
String cert_new_vol = &quot;New_Volume&quot;;
String cert_new_sec = &quot;New_Section&quot;;
String cert_new_issue_date = &quot;New_Issue-Date&quot;;

String[] params = Arrays.asList(cert_id, cert_type, cert_num, cert_rev_num, cert_owner, cert_status, cert_applicant_file, cert_vol, cert_sec, cert_issue_date, cert_new_vol, cert_new_sec, cert_new_issue_date);

cal_create_date = new Date().format(&apos;yyyyMMdd&apos;);

String user_no = vars.get(&quot;user_number&quot;);

FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+cal_create_date+&quot;_ProjectNo_&quot;+user_no+&quot;_AuthCopyInput.tsv&quot;, true);
writeLine(fileWriter, params1, SEPARATOR);
writeLine(fileWriter, params2, SEPARATOR);
writeLine(fileWriter, params3, SEPARATOR);
writeLine(fileWriter, params4, SEPARATOR);
writeLine(fileWriter, params5, SEPARATOR);
writeLine(fileWriter, params, SEPARATOR);
//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="TestPlan.comments">Making decision based on Certificate Product type, Standard value and Secondary Standard Value. </stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;

certificate_type = &quot;${cert_scheme}&quot;;
if(certificate_type == null || certificate_type.isEmpty()) {cert_type = &quot;&quot;} else {cert_type = certificate_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_type&quot;, cert_type);

certificate_body = &quot;${cert_body}&quot;;
if(certificate_body == null || certificate_body.isEmpty()) {cert_body = &quot;&quot;} else {cert_body = certificate_body.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_body&quot;, cert_body);

certificate_mark = &quot;${cert_mark}&quot;;
if(certificate_mark == null || certificate_mark.isEmpty()) {cert_mark = &quot;&quot;} else {cert_mark = certificate_mark.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_mark&quot;, certificate_mark);

certificate_owner = &quot;${owner_ref}&quot;;
if(certificate_owner == null || certificate_owner.isEmpty()) {cert_owner = &quot;&quot;} else {cert_owner = certificate_owner.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;certificate_owner&quot;, cert_owner);

product_type = &quot;${product_type}&quot;;
if(product_type == null || product_type.isEmpty()) {prod_type = &quot;&quot;} else {prod_type = product_type.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;product_type&quot;, prod_type);

ref_no = &quot;${applicant_file}&quot;
if(ref_no == null || ref_no.isEmpty()) {ref = &quot;&quot;} else {ref = ref_no.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;ref_no&quot;, ref);

off_set = &quot;${offset}&quot;
if(off_set == null || off_set.isEmpty()) {offset = &quot;&quot;} else {offset = off_set.replace(&quot;\&quot;&quot;, &quot;&quot;).trim()};
vars.put(&quot;T1_offset&quot;, offset);</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
          <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${grant_type}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${scope}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Cert Count" enabled="true">
          <stringProp name="TestPlan.comments">Paginated Certificate Search </stringProp>
          <stringProp name="HTTPSampler.path">${Environment_Path}/certificates/summary</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_PL_body" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;searchText\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\\50696\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;offset\&quot; : \&quot;${T1_offset}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;rows\&quot; : \&quot;400\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;orderBy\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;isPLCertificate\&quot; : \&quot;N\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;latestCompletedCertificate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//searchParameters blob starts here
result.append(&quot;\&quot;searchParameters\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccn\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${ccn}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fileNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${applicant_file}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${product_type}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&quot;\&quot;mark\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_mark}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBody\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_body}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReference\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${owner_ref}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateName\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_no}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_scheme}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
//searchParameters blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;statusList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateTypeList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReferenceList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBodyList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;markList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccnList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;facet\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;certificateType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issuingBody\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;ccn\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partySiteNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issueDate\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partiesRelationshipType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;fileNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;volume\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;section\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;status\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_Cert_Total_Count JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">T1_Cert_Total_Count</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..totalCount</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler_Successive loop" enabled="true">
          <stringProp name="TestPlan.comments">For count &gt; 400</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.text.*;
import java.util.*;

def pl_count = (vars.get(&quot;T1_Cert_Total_Count&quot;)).toInteger();
//log.info(&quot;cert_count:&quot; + pl_count.toString());

if(pl_count &gt; 400) 
	{
		//diff = (pl_count - 400); 
		count = pl_count/400;
		ceil_count = Math.ceil(count);
		int new_count = Math.round(ceil_count);
		log.info(&quot;new_count:&quot; +new_count.toString());
		vars.put(&quot;A&quot;, new_count.toString());
	}
else
	{
		def_count = 1;
		vars.put(&quot;A&quot;, def_count.toString());
	}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${A}</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting an Access Token for IP" enabled="true">
            <stringProp name="HTTPSampler.domain">login.microsoftonline.com</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/ul.onmicrosoft.com/oauth2/token</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${grant_type}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${scope}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_id_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__V(client_secret_${environment})}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Access_Token " enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

String s = &quot;access_token&quot;;
String token = vars.get(s);

// Trying to set property variable (Global Variable)
props.put(&quot;Access_Token&quot;, token);

//${__setProperty(Access_Token, ${access_token})};</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import java.text.*;
import java.util.*;

def offset = (vars.get(&quot;offset&quot;)).toInteger();
//log.info(offset.toString());

def new_offset = offset + (${__jm__Loop Controller__idx} * 400)
log.info(new_offset.toString());

vars.put(&quot;new_offset&quot;, new_offset.toString());</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Cert ID" enabled="true">
            <stringProp name="TestPlan.comments">Paginated Certificate Search </stringProp>
            <stringProp name="HTTPSampler.path">${Environment_Path}/certificates/summary</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${Model_jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__property(Access_Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PrePro_cert_body" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.text.*;
import java.util.*;

StringBuilder result = new StringBuilder();

result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;data\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;searchText\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;user\&quot; : \&quot;GLOBAL\\\\\\\\50696\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;offset\&quot; : \&quot;${new_offset}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;rows\&quot; : \&quot;400\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;orderBy\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toModifiedDate\&quot; : {},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;isPLCertificate\&quot; : \&quot;N\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;latestCompletedCertificate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toIssueDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toExpiryDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fromWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;toWithdrawalDate\&quot; : \&quot;\&quot;,&quot;);
result.append(&apos;\n&apos;);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//searchParameters blob starts here
result.append(&quot;\&quot;searchParameters\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccn\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${ccn}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;fileNumber\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${applicant_file}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;productType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${product_type}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&quot;\&quot;mark\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_mark}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBody\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_body}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReference\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;${operator}\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${owner_ref}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateName\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_no}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateType\&quot; : {&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;operator\&quot; : \&quot;like\&quot;,&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;value\&quot; : \&quot;${cert_scheme}\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
//searchParameters blob ends here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;statusList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;certificateTypeList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ownerReferenceList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;issuingBodyList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;markList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;ccnList\&quot; : [],&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;facet\&quot; : [&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;certificateType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issuingBody\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;ccn\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partySiteNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;issueDate\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;partiesRelationshipType\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;fileNumber\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;volume\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;section\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;},&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;{&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;\&quot;field\&quot; : \&quot;status\&quot;&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;]&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);
result.append(&apos;\n&apos;);
result.append(&quot;}&quot;);

vars.put(&quot;Model_jsonData&quot;, result.toString());
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_cert_Total_Count JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_Cert_Total_Count</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..totalCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract_List_of_cert JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">T1_List_of_Cert</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data..Certificate</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Extract Unique cert and Store">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.util.*;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.Writer;
import java.util.List;
import org.apache.jmeter.services.FileServer;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.text.SimpleDateFormat;  
import java.util.Date;  

//Default separator
char SEPARATOR = &apos;\t&apos;;

//function write line in csv
public void writeLine(FileWriter writer, String[] params, char separator)
{
   boolean firstParam = true;

   StringBuilder stringBuilder = new StringBuilder();
   String param = &quot;&quot;;
   
   for (int i = 0; i &lt; params.length; i++)
   {
      //get param
      param = params[i];
      log.info(param);
       
         //if the first param in the line, separator is not needed
       if (!firstParam) 
       {
           stringBuilder.append(separator);
       }

         //Add param to line
       stringBuilder.append(param);
      
       firstParam = false;
   }

   //prepare file to next line
   stringBuilder.append(System.getProperty(&quot;line.separator&quot;));

   //add to file the line
   //log.info(stringBuilder.toString());
   writer.append(stringBuilder.toString());

}

JSONArray Number_of_PL = new JSONArray(vars.get(&quot;T1_List_of_Cert&quot;).toString()); 
int PL_count = Number_of_PL.length(); // get totalCount of all jsonObjects &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;///// Start Here ///////&gt;&gt;&gt;&gt;&gt;&gt;
log.info(&quot;PL_count:&quot; + PL_count.toString());

for(int pl=0 ; pl &lt; PL_count; pl++){ // iterate through jsonArray 
	JSONObject pl_Object = Number_of_PL.get(pl);
	//log.info(&quot;pl_Object:&quot; + pl_Object.toString());

	String cert_type = pl_Object.getString(&quot;certificateType&quot;); 
	String cert_body = pl_Object.getString(&quot;issuingBody&quot;); 
	String cert_mark = pl_Object.getString(&quot;mark&quot;); 
	String cert_num = pl_Object.getString(&quot;certificateName&quot;); 
	try {
		if(pl_Object.has(&quot;revisionNumber&quot;)) {
			String cert_rev_num = pl_Object.getString(&quot;revisionNumber&quot;);		
		} else {
			String cert_rev_num = &quot;&quot;; 
		}
	}
	catch (ParseException e) {
		e.printStackTrace();
	}	
	String cert_owner = pl_Object.getString(&quot;ownerReference&quot;); 
	String cert_applicant_file = pl_Object.getString(&quot;fileNumber&quot;); 
	String cert_ccn = pl_Object.getString(&quot;ccn&quot;);
	String cert_status = pl_Object.getString(&quot;certificateStatus&quot;); 
	String cert_vol = pl_Object.getString(&quot;volume&quot;); 
	String cert_sec = pl_Object.getString(&quot;section&quot;);
	String cert_id = pl_Object.getString(&quot;certificateId&quot;); 
	String cert_new_vol = &quot;&quot;; 
	String cert_new_sec = &quot;&quot;; 
	String cert_new_issue_date = &quot;&quot;; 
	
	cert_issue_date_need_format = pl_Object.getString(&quot;issueDate&quot;);
	log.info(&quot;cert_issue_date_need_format:&quot; +cert_issue_date_need_format.toString());
	if (!cert_issue_date_need_format.isEmpty()){
		//log.info(&quot;true&quot;);	
		try{
			cert_issue_date_format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).parse(cert_issue_date_need_format);
			//log.info(&quot;cert_issue_date_format:&quot; +cert_issue_date_format.toString());	
			SimpleDateFormat taxo_json_date = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;);
			cert_issue_date = taxo_json_date.format(cert_issue_date_format);
			log.info(&quot;cert_issue_date:&quot; +cert_issue_date.toString());	

		} 
		catch (ParseException e) {
					e.printStackTrace();
				}
	} else {
		//log.info(&quot;false&quot;);
		cert_issue_date = &quot;&quot;;
		log.info(&quot;cert_issue_date&quot; + cert_issue_date);
	}
	
	String[] params = Arrays.asList(cert_id, cert_type, cert_num, cert_rev_num, cert_owner, cert_status, cert_applicant_file,  cert_vol, cert_sec, cert_issue_date, cert_new_vol, cert_new_sec, cert_new_issue_date);
	
	cal_create_date = new Date().format(&apos;yyyyMMdd&apos;);

	String user_no = vars.get(&quot;user_number&quot;);
	
	FileWriter fileWriter = new FileWriter(FileServer.getFileServer().getBaseDir() + File.separator+File.separator+File.separator+File.separator+cal_create_date+&quot;_ProjectNo_&quot;+user_no+&quot;_AuthCopyInput.tsv&quot;, true);
	//****
	// All Pl&apos;s are out of scope under the perview of Authorized Copy requirement
	// All (obsolete/expired) certificates are out of scope
	// All &quot;X-&quot; certificates are out of scope
	// All (draft/under rev cert with rev-version &apos;0&apos; to be excluded)
	//****
	if (!(cert_num.startsWith(&quot;X-&quot;))){
		if (cert_status != &quot;Obsolete&quot;){
			if (!(cert_status == &quot;Under Revision&quot;)) {
				if ((cert_type == &apos;US Safety Scheme&apos; || cert_type == &apos;Canada Safety Scheme&apos; || cert_type == &apos;ULC Mark Safety Scheme&apos;)) {
					writeLine(fileWriter, params, SEPARATOR);				
				}
			}					
		}
	}
	
	//proper close to file
	fileWriter.flush();
	fileWriter.close();
}</stringProp>
              <stringProp name="TestPlan.comments">Get List of Base Asset Associated with Base certificate</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">true</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
